<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:gui="clr-namespace:WinCopies.GUI"
    xmlns:local="clr-namespace:WinCopies.GUI.Controls"
    xmlns:dotNetFix="clr-namespace:WinCopies.GUI.Controls.DotNetFix"
    xmlns:commands="clr-namespace:WinCopies.Commands;assembly=WinCopies.Util.Desktop"
    xmlns:icons="clr-namespace:WinCopies.GUI.Icons.Properties;assembly=WinCopies.GUI.Icons"
    xmlns:util="clr-namespace:WinCopies;assembly=WinCopies.Util.Desktop"
    xmlns:converters="clr-namespace:WinCopies.Util.Data;assembly=WinCopies.Util.Desktop"
    xmlns:markup="clr-namespace:WinCopies.Markup;assembly=WinCopies.Util.Desktop"
    xmlns:guiDialogs="clr-namespace:WinCopies.GUI.Windows;assembly=WinCopies.GUI.Models"
    xmlns:windows="clr-namespace:WinCopies.GUI.Windows"
    xmlns:propertySystem="clr-namespace:WinCopies.GUI.Controls.PropertySystem"
    xmlns:controls="clr-namespace:System.Windows.Controls;assembly=PresentationFramework">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/wincopies.gui.templates;component/Themes/Generic.xaml" />
        <ResourceDictionary>
            <!--Converters-->
            <converters:IsNullConverter x:Key="IsNullConverter" />
            <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
            <converters:EnumToBooleanConverter x:Key="EnumToBooleanConverter" />
            <windows:ButtonAlignmentToHorizontalAlignmentConverter x:Key="ButtonAlignmentToHorizontalAlignmentConverter" />
            <propertySystem:PropertyConverter x:Key="PropertyConverter" />
            <converters:EqualsConverter x:Key="EqualsConverter" />
            <!--End of Converters Section-->
            <ContextMenu x:Key="TextBoxContextMenu">
                <MenuItem Command="{x:Static ApplicationCommands.Undo}" Icon="{x:Static icons:Resources.arrow_undo}" />
                <MenuItem Command="{x:Static ApplicationCommands.Redo}" Icon="{x:Static icons:Resources.arrow_redo}" />
                <Separator />
                <MenuItem Command="{x:Static ApplicationCommands.Cut}" Icon="{x:Static icons:Resources.cut}" />
                <MenuItem Command="{x:Static ApplicationCommands.Copy}" Icon="{x:Static icons:Resources.page_copy}" />
                <MenuItem Command="{x:Static ApplicationCommands.Paste}" Icon="{x:Static icons:Resources.page_paste}" />
                <MenuItem Command="{x:Static ApplicationCommands.Delete}" Icon="{x:Static icons:Resources.delete}" />
                <Separator />
                <MenuItem Command="{x:Static ApplicationCommands.SelectAll}" />
                <MenuItem Header="Case">
                    <MenuItem Command="{x:Static commands:TextCommands.Upper}" Icon="{x:Static icons:Resources.text_uppercase}" />
                    <MenuItem Command="{x:Static commands:TextCommands.Lower}" Icon="{x:Static icons:Resources.text_lowercase}" />
                    <MenuItem Command="{x:Static commands:TextCommands.FirstCharUpper}" />
                    <MenuItem Command="{x:Static commands:TextCommands.FirstCharOfEachWordUpper}" />
                </MenuItem>
                <MenuItem Command="{x:Static commands:TextCommands.Reverse}" />
            </ContextMenu>
            <!--Colors-->
            <SolidColorBrush x:Key="TextBox.Static.Border" Color="#FFABAdB3"/>
            <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#FF7EB4EA"/>
            <SolidColorBrush x:Key="TextBox.Focus.Border" Color="#FF569DE5"/>

            <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
            <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
            <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
            <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
            <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
            <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
            <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
            <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
            <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>

            <SolidColorBrush x:Key="Menu.Static.Background" Color="#FFF0F0F0"/>
            <SolidColorBrush x:Key="Menu.Static.Border" Color="#FF999999"/>
            <SolidColorBrush x:Key="Menu.Static.Foreground" Color="#FF212121"/>
            <SolidColorBrush x:Key="Menu.Disabled.Foreground" Color="#FF707070"/>
            <!--End of Colors Section-->
            <!--Styles-->
            <Style x:Key="WinCopies.GUI.Controls.TextBoxStyle" TargetType="{x:Type local:TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
                <Setter Property="LeftItems" Value="{Binding LeftItems}" />
                <Setter Property="RightItems" Value="{Binding RightItems}" />
            </Style>
            <Style x:Key="WinCopies.GUI.Controls.ButtonTextBoxStyle" TargetType="{x:Type local:ButtonTextBox}" BasedOn="{StaticResource WinCopies.GUI.Controls.TextBoxStyle}">
                <Setter Property="Buttons" Value="{Binding Buttons}" />
            </Style>
            <Style x:Key="WinCopies.GUI.Controls.PlaceholderTextBoxStyle" TargetType="{x:Type local:PlaceholderTextBox}" BasedOn="{StaticResource WinCopies.GUI.Controls.ButtonTextBoxStyle}">
                <Setter Property="PlaceholderStyle">
                    <Setter.Value>
                        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
                            <Setter Property="Foreground" Value="DimGray" />
                            <Setter Property="FontStyle" Value="Italic" />
                            <Setter Property="Text" Value="{Binding Placeholder}" />
                        </Style>
                    </Setter.Value>
                </Setter>
                <Setter Property="PlaceholderMode" Value="{Binding PlaceholderMode}" />
            </Style>
            <!--End of Styles Section-->
            <Geometry x:Key="DownArrow">M 0,0 L 3.5,4 L 7,0 Z</Geometry>
        </ResourceDictionary>
    </ResourceDictionary.MergedDictionaries>

    <ControlTemplate x:Key="ListViewTemplate" TargetType="{x:Type local:ListView}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="auto" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>

            <Grid.RowDefinitions>
                <RowDefinition />
                <RowDefinition />
            </Grid.RowDefinitions>

            <ItemsControl ItemsSource="{TemplateBinding Filters}" Grid.RowSpan="2">
                <ItemsControl.Template>
                    <ControlTemplate TargetType="{x:Type ItemsControl}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="auto" />
                            </Grid.ColumnDefinitions>

                            <Grid.RowDefinitions>
                                <RowDefinition Height="auto" />
                                <RowDefinition />
                            </Grid.RowDefinitions>

                            <Label>Filters</Label>

                            <StackPanel Grid.Column="1" Orientation="Horizontal" HorizontalAlignment="Right">
                                <Button Content="Apply filters" Command="{x:Static commands:DialogCommands.Apply}" />
                                <Button Content="Reset" Command="{x:Static commands:ApplicationCommands.Reset}" />
                            </StackPanel>

                            <ItemsPresenter Grid.ColumnSpan="2" Grid.Row="1" />
                        </Grid>
                    </ControlTemplate>
                </ItemsControl.Template>
                <ItemsControl.ItemTemplate>
                    <DataTemplate DataType="{x:Type local:IFilterEnumerable}">
                        <Expander IsExpanded="{Binding IsChecked}" Header="{Binding Header}">
                            <ListBox ItemsSource="{Binding}">
                                <ListBox.ItemTemplate>
                                    <DataTemplate DataType="{x:Type local:IFilter}">
                                        <CheckBox IsChecked="{Binding IsChecked}">
                                            <StackPanel Orientation="Horizontal">
                                                <ContentPresenter ContentSource="Icon" />
                                                <ContentPresenter ContentSource="Content" />
                                            </StackPanel>
                                        </CheckBox>
                                    </DataTemplate>
                                </ListBox.ItemTemplate>
                            </ListBox>
                        </Expander>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>

            <ItemsPresenter Grid.Column="1" />

            <ContentPresenter ContentSource="Content" />
        </Grid>
    </ControlTemplate>

    <Style BasedOn="{StaticResource {x:Type ListView}}" TargetType="{x:Type local:ListView}">
        <Setter Property="Template" Value="{StaticResource ListViewTemplate}" />
    </Style>

    <Style BasedOn="{StaticResource {x:Type Window}}" TargetType="{x:Type windows:Window}">
        <Style.Triggers>
            <Trigger Property="IsInHelpMode" Value="true" >
                <Setter Property="Cursor" Value="Help" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type windows:DialogWindow}" BasedOn="{StaticResource {x:Type windows:Window}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type windows:DialogWindow}">
                    <Grid Background="White">
                        <Grid.RowDefinitions >
                            <RowDefinition />
                            <RowDefinition Height="auto" />
                        </Grid.RowDefinitions>
                        <ContentControl Content="{TemplateBinding Content}" Style="{TemplateBinding ContentDecoratorStyle}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}" />
                        <StackPanel Grid.Row="1" Orientation="Horizontal" FlowDirection="{TemplateBinding FlowDirection}" HorizontalAlignment="{Binding FlowDirection, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={gui:FlowDirectionToHorizontalAlignment}}">
                            <Control Grid.Row="1" HorizontalAlignment="{Binding ButtonAlignment, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource ButtonAlignmentToHorizontalAlignmentConverter}}" Focusable="False" >
                                <Control.Style>
                                    <Style TargetType="{x:Type Control}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding DialogButton, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="{x:Static guiDialogs:DialogButton.OK}">
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate>
                                                            <Button Command="{x:Static commands:DialogCommands.Ok}" CommandTarget="{Binding RelativeSource={RelativeSource Self}}" Content="{Binding Command.Text, RelativeSource={RelativeSource Self}}" IsDefault="{Binding DefaultButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static guiDialogs:DefaultButton.OK}}" />
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>

                                            <DataTrigger Binding="{Binding DialogButton, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="{x:Static guiDialogs:DialogButton.OKCancel}">
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate>
                                                            <StackPanel FlowDirection="{Binding FlowDirection, RelativeSource={RelativeSource AncestorType={x:Type windows:DialogWindow}, Mode=FindAncestor}}" Orientation="Horizontal">
                                                                <Button Command="{x:Static commands:DialogCommands.Ok}" CommandTarget="{Binding RelativeSource={RelativeSource Self}}" Content="{Binding Command.Text, RelativeSource={RelativeSource Self}}" IsDefault="{Binding DefaultButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static guiDialogs:DefaultButton.OK}}" />
                                                                <Button Command="{x:Static commands:DialogCommands.Cancel}" CommandTarget="{Binding RelativeSource={RelativeSource Self}}" Content="{Binding Command.Text, RelativeSource={RelativeSource Self}}" IsDefault="{Binding DefaultButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static guiDialogs:DefaultButton.Cancel}}" IsCancel="True" />
                                                            </StackPanel>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>

                                            <DataTrigger Binding="{Binding DialogButton, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="{x:Static guiDialogs:DialogButton.AbortRetryIgnore}">
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate>
                                                            <StackPanel FlowDirection="{Binding FlowDirection, RelativeSource={RelativeSource AncestorType={x:Type windows:DialogWindow}, Mode=FindAncestor}}" Orientation="Horizontal" >
                                                                <Button Command="{x:Static commands:DialogCommands.Abort}" CommandTarget="{Binding RelativeSource={RelativeSource Self}}" Content="{Binding Command.Text, RelativeSource={RelativeSource Self}}" IsDefault="{Binding DefaultButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static guiDialogs:DefaultButton.Abort}}" />
                                                                <Button Command="{x:Static commands:DialogCommands.Retry}" CommandTarget="{Binding RelativeSource={RelativeSource Self}}" Content="{Binding Command.Text, RelativeSource={RelativeSource Self}}" IsDefault="{Binding DefaultButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static guiDialogs:DefaultButton.Retry}}" />
                                                                <Button Command="{x:Static commands:DialogCommands.Ignore}" CommandTarget="{Binding RelativeSource={RelativeSource Self}}" Content="{Binding Command.Text, RelativeSource={RelativeSource Self}}" IsDefault="{Binding DefaultButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static guiDialogs:DefaultButton.Ignore}}" IsCancel="True" />
                                                            </StackPanel>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>

                                            <DataTrigger Binding="{Binding DialogButton, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="{x:Static guiDialogs:DialogButton.YesNoCancel}">
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate>
                                                            <StackPanel FlowDirection="{Binding FlowDirection, RelativeSource={RelativeSource AncestorType={x:Type windows:DialogWindow}, Mode=FindAncestor}}" Orientation="Horizontal" >
                                                                <Button Command="{x:Static commands:DialogCommands.Yes}" CommandTarget="{Binding RelativeSource={RelativeSource Self}}" Content="{Binding Command.Text, RelativeSource={RelativeSource Self}}" IsDefault="{Binding DefaultButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static guiDialogs:DefaultButton.Yes}}" IsEnabled="{Binding IsPredicateValid, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                                                                <Button Command="{x:Static commands:DialogCommands.No}" CommandTarget="{Binding RelativeSource={RelativeSource Self}}" Content="{Binding Command.Text, RelativeSource={RelativeSource Self}}" IsDefault="{Binding DefaultButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static guiDialogs:DefaultButton.No}}" />
                                                                <Button Command="{x:Static commands:DialogCommands.Cancel}" CommandTarget="{Binding RelativeSource={RelativeSource Self}}" Content="{Binding Command.Text, RelativeSource={RelativeSource Self}}" IsDefault="{Binding DefaultButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static guiDialogs:DefaultButton.Cancel}}" IsCancel="True" />
                                                            </StackPanel>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>

                                            <DataTrigger Binding="{Binding DialogButton, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="{x:Static guiDialogs:DialogButton.YesNo}">
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate>
                                                            <StackPanel FlowDirection="{Binding FlowDirection, RelativeSource={RelativeSource AncestorType={x:Type windows:DialogWindow}, Mode=FindAncestor}}" Orientation="Horizontal" >
                                                                <Button Command="{x:Static commands:DialogCommands.Yes}" CommandTarget="{Binding RelativeSource={RelativeSource Self}}" Content="{Binding Command.Text, RelativeSource={RelativeSource Self}}" IsDefault="{Binding DefaultButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static guiDialogs:DefaultButton.Yes}}" IsEnabled="{Binding IsPredicateValid, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                                                                <Button Command="{x:Static commands:DialogCommands.No}" CommandTarget="{Binding RelativeSource={RelativeSource Self}}" Content="{Binding Command.Text, RelativeSource={RelativeSource Self}}" IsDefault="{Binding DefaultButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static guiDialogs:DefaultButton.No}}" />
                                                            </StackPanel>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>

                                            <DataTrigger Binding="{Binding DialogButton, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="{x:Static guiDialogs:DialogButton.RetryCancel}">
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate>
                                                            <StackPanel FlowDirection="{Binding FlowDirection, RelativeSource={RelativeSource AncestorType={x:Type windows:DialogWindow}, Mode=FindAncestor}}" Orientation="Horizontal" >
                                                                <Button Command="{x:Static commands:DialogCommands.Retry}" CommandTarget="{Binding RelativeSource={RelativeSource Self}}" Content="{Binding Command.Text, RelativeSource={RelativeSource Self}}" IsDefault="{Binding DefaultButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static guiDialogs:DefaultButton.Retry}}" />
                                                                <Button Command="{x:Static commands:DialogCommands.Cancel}" CommandTarget="{Binding RelativeSource={RelativeSource Self}}" Content="{Binding Command.Text, RelativeSource={RelativeSource Self}}" IsDefault="{Binding DefaultButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static guiDialogs:DefaultButton.Cancel}}" IsCancel="True" />
                                                            </StackPanel>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>

                                            <DataTrigger Binding="{Binding DialogButton, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="{x:Static guiDialogs:DialogButton.CancelTryContinue}">
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate>
                                                            <StackPanel FlowDirection="{Binding FlowDirection, RelativeSource={RelativeSource AncestorType={x:Type windows:DialogWindow}, Mode=FindAncestor}}" Orientation="Horizontal" >
                                                                <Button Command="{x:Static commands:DialogCommands.Cancel}" CommandTarget="{Binding RelativeSource={RelativeSource Self}}" Content="{Binding Command.Text, RelativeSource={RelativeSource Self}}" IsDefault="{Binding DefaultButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static guiDialogs:DefaultButton.Cancel}}" IsCancel="True" />
                                                                <Button Command="{x:Static commands:DialogCommands.Retry}" CommandTarget="{Binding RelativeSource={RelativeSource Self}}" Content="{Binding Command.Text, RelativeSource={RelativeSource Self}}" IsDefault="{Binding DefaultButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static guiDialogs:DefaultButton.Retry}}" />
                                                                <Button Command="{x:Static commands:DialogCommands.Continue}" CommandTarget="{Binding RelativeSource={RelativeSource Self}}" Content="{Binding Command.Text, RelativeSource={RelativeSource Self}}" IsDefault="{Binding DefaultButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static guiDialogs:DefaultButton.Continue}}" />
                                                            </StackPanel>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>

                                            <DataTrigger Binding="{Binding DialogButton, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="{x:Static guiDialogs:DialogButton.ContinueIgnoreCancel}">
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate>
                                                            <StackPanel FlowDirection="{Binding FlowDirection, RelativeSource={RelativeSource AncestorType={x:Type windows:DialogWindow}, Mode=FindAncestor}}" Orientation="Horizontal" >
                                                                <Button Command="{x:Static commands:DialogCommands.Continue}" CommandTarget="{Binding RelativeSource={RelativeSource Self}}" Content="{Binding Command.Text, RelativeSource={RelativeSource Self}}" IsDefault="{Binding DefaultButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static guiDialogs:DefaultButton.Continue}}" />
                                                                <Button Command="{x:Static commands:DialogCommands.Ignore}" CommandTarget="{Binding RelativeSource={RelativeSource Self}}" Content="{Binding Command.Text, RelativeSource={RelativeSource Self}}" IsDefault="{Binding DefaultButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static guiDialogs:DefaultButton.Ignore}}" />
                                                                <Button Command="{x:Static commands:DialogCommands.Cancel}" CommandTarget="{Binding RelativeSource={RelativeSource Self}}" Content="{Binding Command.Text, RelativeSource={RelativeSource Self}}" IsDefault="{Binding DefaultButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static guiDialogs:DefaultButton.Cancel}}" IsCancel="True" />
                                                            </StackPanel>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>

                                            <DataTrigger Binding="{Binding DialogButton, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="{x:Static guiDialogs:DialogButton.OKApplyCancel}">
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate>
                                                            <StackPanel FlowDirection="{Binding FlowDirection, RelativeSource={RelativeSource AncestorType={x:Type windows:DialogWindow}, Mode=FindAncestor}}" Orientation="Horizontal" >
                                                                <Button Command="{x:Static commands:DialogCommands.Ok}" CommandTarget="{Binding RelativeSource={RelativeSource Self}}" Content="{Binding Command.Text, RelativeSource={RelativeSource Self}}" IsDefault="{Binding DefaultButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static guiDialogs:DefaultButton.OK}}" />
                                                                <Button Command="{x:Static commands:DialogCommands.Apply}" CommandTarget="{Binding RelativeSource={RelativeSource Self}}" Content="{Binding Command.Text, RelativeSource={RelativeSource Self}}" IsDefault="{Binding DefaultButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static guiDialogs:DefaultButton.Apply}}" />
                                                                <Button Command="{x:Static commands:DialogCommands.Cancel}" CommandTarget="{Binding RelativeSource={RelativeSource Self}}" Content="{Binding Command.Text, RelativeSource={RelativeSource Self}}" IsDefault="{Binding DefaultButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static guiDialogs:DefaultButton.Cancel}}" IsCancel="True" />
                                                            </StackPanel>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>

                                            <DataTrigger Binding="{Binding DialogButton, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="{x:Static guiDialogs:DialogButton.RetryIgnoreCancel}">
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate>
                                                            <StackPanel FlowDirection="{Binding FlowDirection, RelativeSource={RelativeSource AncestorType={x:Type windows:DialogWindow}, Mode=FindAncestor}}" Orientation="Horizontal" >
                                                                <Button Command="{x:Static commands:DialogCommands.Retry}" CommandTarget="{Binding RelativeSource={RelativeSource Self}}" Content="{Binding Command.Text, RelativeSource={RelativeSource Self}}" IsDefault="{Binding DefaultButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static guiDialogs:DefaultButton.Retry}}" />
                                                                <Button Command="{x:Static commands:DialogCommands.Ignore}" CommandTarget="{Binding RelativeSource={RelativeSource Self}}" Content="{Binding Command.Text, RelativeSource={RelativeSource Self}}" IsDefault="{Binding DefaultButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static guiDialogs:DefaultButton.Ignore}}" />
                                                                <Button Command="{x:Static commands:DialogCommands.Cancel}" CommandTarget="{Binding RelativeSource={RelativeSource Self}}" Content="{Binding Command.Text, RelativeSource={RelativeSource Self}}" IsDefault="{Binding DefaultButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static guiDialogs:DefaultButton.Cancel}}" IsCancel="True" />
                                                            </StackPanel>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>

                                            <DataTrigger Binding="{Binding DialogButton, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="{x:Static guiDialogs:DialogButton.IgnoreCancel}">
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate>
                                                            <StackPanel FlowDirection="{Binding FlowDirection, RelativeSource={RelativeSource AncestorType={x:Type windows:DialogWindow}, Mode=FindAncestor}}" Orientation="Horizontal" >
                                                                <Button Command="{x:Static commands:DialogCommands.Ignore}" CommandTarget="{Binding RelativeSource={RelativeSource Self}}" Content="{Binding Command.Text, RelativeSource={RelativeSource Self}}" IsDefault="{Binding DefaultButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static guiDialogs:DefaultButton.Ignore}}" />
                                                                <Button Command="{x:Static commands:DialogCommands.Cancel}" CommandTarget="{Binding RelativeSource={RelativeSource Self}}" Content="{Binding Command.Text, RelativeSource={RelativeSource Self}}" IsDefault="{Binding DefaultButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static guiDialogs:DefaultButton.Cancel}}" IsCancel="True" />
                                                            </StackPanel>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>

                                            <DataTrigger Binding="{Binding DialogButton, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="{x:Static guiDialogs:DialogButton.YesToAllNoToAllCancel}">
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate>
                                                            <StackPanel FlowDirection="{Binding FlowDirection, RelativeSource={RelativeSource AncestorType={x:Type windows:DialogWindow}, Mode=FindAncestor}}" Orientation="Horizontal" >
                                                                <Button Command="{x:Static commands:DialogCommands.YesToAll}" CommandTarget="{Binding RelativeSource={RelativeSource Self}}" Content="{Binding Command.Text, RelativeSource={RelativeSource Self}}" IsDefault="{Binding DefaultButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static guiDialogs:DefaultButton.YesToAll}}" />
                                                                <Button Command="{x:Static commands:DialogCommands.NoToAll}" CommandTarget="{Binding RelativeSource={RelativeSource Self}}" Content="{Binding Command.Text, RelativeSource={RelativeSource Self}}" IsDefault="{Binding DefaultButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static guiDialogs:DefaultButton.NoToAll}}" />
                                                                <Button Command="{x:Static commands:DialogCommands.Cancel}" CommandTarget="{Binding RelativeSource={RelativeSource Self}}" Content="{Binding Command.Text, RelativeSource={RelativeSource Self}}" IsDefault="{Binding DefaultButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static guiDialogs:DefaultButton.Cancel}}" IsCancel="True" />
                                                            </StackPanel>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>

                                            <DataTrigger Binding="{Binding DialogButton, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="{x:Static guiDialogs:DialogButton.YesToAllNoToAll}">
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate>
                                                            <StackPanel FlowDirection="{Binding FlowDirection, RelativeSource={RelativeSource AncestorType={x:Type windows:DialogWindow}, Mode=FindAncestor}}" Orientation="Horizontal" >
                                                                <Button Command="{x:Static commands:DialogCommands.YesToAll}" CommandTarget="{Binding RelativeSource={RelativeSource Self}}" Content="{Binding Command.Text, RelativeSource={RelativeSource Self}}" IsDefault="{Binding DefaultButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static guiDialogs:DefaultButton.YesToAll}}" />
                                                                <Button Command="{x:Static commands:DialogCommands.NoToAll}" CommandTarget="{Binding RelativeSource={RelativeSource Self}}" Content="{Binding Command.Text, RelativeSource={RelativeSource Self}}" IsDefault="{Binding DefaultButton, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static guiDialogs:DefaultButton.NoToAll}}" />
                                                            </StackPanel>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </DataTrigger>

                                            <DataTrigger Binding="{Binding CustomButtonsSource, RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={converters:IsNullConverter}}" Value="false">
                                                <DataTrigger.Setters>
                                                    <Setter Property="Template">
                                                        <Setter.Value>
                                                            <ControlTemplate TargetType="{x:Type Control}" >
                                                                <ItemsControl x:Name="PART_ItemsControl" ItemsSource="{Binding CustomButtonsSource, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}}" ItemTemplate="{Binding CustomButtonTemplate, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}}" ItemTemplateSelector="{Binding CustomButtonTemplateSelector, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:DialogWindow}}}">
                                                                    <ItemsControl.Resources>
                                                                        <ResourceDictionary>
                                                                            <ResourceDictionary.MergedDictionaries>
                                                                                <ResourceDictionary Source="pack://application:,,,/wincopies.gui.templates;component/Themes/Generic.xaml" />
                                                                            </ResourceDictionary.MergedDictionaries>
                                                                        </ResourceDictionary>
                                                                    </ItemsControl.Resources>

                                                                    <ItemsControl.ItemsPanel>
                                                                        <ItemsPanelTemplate>
                                                                            <StackPanel Orientation="Horizontal" />
                                                                        </ItemsPanelTemplate>
                                                                    </ItemsControl.ItemsPanel>
                                                                </ItemsControl>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger.Setters>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Control.Style>
                            </Control>
                            <Button Command="Help" Content="{Binding Command.Text, RelativeSource={RelativeSource Self}}" Visibility="{Binding ShowHelpButtonAsCommandButton, RelativeSource={RelativeSource TemplatedParent}, Converter={converters:BooleanToVisibilityConverter}}" />
                        </StackPanel>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="InputBoxTemplate.Horizontal" TargetType="{x:Type ContentControl}">
        <Grid Background="{Binding Background, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:InputBox}}}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="auto" />
                <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <ContentPresenter />
            <TextBox Grid.Column="1" Text="{Binding Text, Mode=TwoWay, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:InputBox}}}" />
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="InputBoxTemplate.Vertical" TargetType="{x:Type ContentControl}">
        <StackPanel Background="{Binding Background, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:InputBox}}}">
            <ContentPresenter />
            <TextBox Text="{Binding Text, Mode=TwoWay, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:InputBox}}}" />
        </StackPanel>
    </ControlTemplate>

    <Style BasedOn="{StaticResource {x:Type windows:DialogWindow}}" TargetType="{x:Type windows:InputBox}">
        <Setter Property="Background" Value="White" />
        <Setter Property="ContentDecoratorStyle">
            <Setter.Value>
                <Style TargetType="{x:Type Control}">
                    <Setter Property="Template" Value="{StaticResource InputBoxTemplate.Horizontal}" />
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type windows:InputBox}}}" Value="{x:Static controls:Orientation.Vertical}">
                            <Setter Property="Template" Value="{StaticResource InputBoxTemplate.Vertical}" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource {x:Type TextBox}}" TargetType="{x:Type dotNetFix:TextBox}">
        <Setter Property="ContextMenu" Value="{StaticResource TextBoxContextMenu}" />
    </Style>

    <Style BasedOn="{StaticResource {x:Type dotNetFix:TextBox}}" TargetType="{x:Type local:TextBox}">
        <Setter Property="ContextMenu" Value="{StaticResource TextBoxContextMenu}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:TextBox}">
                    <Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto" />
                                <ColumnDefinition />
                                <ColumnDefinition Width="auto" />
                            </Grid.ColumnDefinitions>
                            <ItemsControl ItemsSource="{TemplateBinding LeftItems}" ItemContainerStyle="{TemplateBinding LeftItemsStyle}" ItemTemplateSelector="{TemplateBinding LeftItemsTemplateSelector}" HorizontalAlignment="Left">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Horizontal" />
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ItemsControl>
                            <ScrollViewer x:Name="PART_ContentHost" Grid.Column="1" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" />
                            <ItemsControl Grid.Column="2" ItemsSource="{TemplateBinding RightItems}" ItemContainerStyle="{TemplateBinding RightItemsStyle}" ItemTemplateSelector="{TemplateBinding RightItemsTemplateSelector}" HorizontalAlignment="Right">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Horizontal" />
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ItemsControl>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource {x:Type local:TextBox}}" TargetType="{x:Type local:ButtonTextBox}">
        <Setter Property="RightItems" Value="{Binding Buttons, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:ButtonTextBox}}}" />
        <Setter Property="RightItemsTemplateSelector">
            <Setter.Value>
                <util:InterfaceDataTemplateSelector />
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource {x:Type local:ButtonTextBox}}" TargetType="{x:Type local:PlaceholderTextBox}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding PlaceholderStyle, Converter={StaticResource IsNullConverter}, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:PlaceholderTextBox}}}" Value="false">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type local:PlaceholderTextBox}">
                            <Border x:Name="border" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="True">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="auto" />
                                        <ColumnDefinition />
                                        <ColumnDefinition Width="auto" />
                                    </Grid.ColumnDefinitions>
                                    <ItemsControl ItemsSource="{TemplateBinding LeftItems}" ItemContainerStyle="{TemplateBinding LeftItemsStyle}" ItemTemplateSelector="{TemplateBinding LeftItemsTemplateSelector}" HorizontalAlignment="Left">
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <StackPanel Orientation="Horizontal" />
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                    </ItemsControl>
                                    <TextBox Grid.Column="1" IsReadOnly="True" IsReadOnlyCaretVisible="False" Style="{TemplateBinding PlaceholderStyle}" Focusable="False" Visibility="{TemplateBinding IsPlaceholderVisible, Converter={StaticResource BooleanToVisibilityConverter}}">
                                        <TextBox.Template>
                                            <ControlTemplate TargetType="{x:Type TextBox}">
                                                <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                                            </ControlTemplate>
                                        </TextBox.Template>
                                    </TextBox>
                                    <ScrollViewer x:Name="PART_ContentHost" Grid.Column="1" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                                    <ItemsControl Grid.Column="2" ItemsSource="{TemplateBinding RightItems}" ItemContainerStyle="{TemplateBinding RightItemsStyle}" ItemTemplateSelector="{TemplateBinding RightItemsTemplateSelector}" HorizontalAlignment="Right">
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <StackPanel Orientation="Horizontal" />
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                    </ItemsControl>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.MouseOver.Border}"/>
                                </Trigger>
                                <Trigger Property="IsKeyboardFocused" Value="true">
                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Focus.Border}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type local:UpDownButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:UpDownButton}">
                    <StackPanel>
                        <Button FontFamily="Segoe UI" Command="{TemplateBinding UpCommand}" CommandParameter="{TemplateBinding UpCommandParameter}" CommandTarget="{TemplateBinding UpCommandTarget}">▲</Button>
                        <Button FontFamily="Segoe UI" Command="{TemplateBinding DownCommand}" CommandParameter="{TemplateBinding DownCommandParameter}" CommandTarget="{TemplateBinding DownCommandTarget}">▼</Button>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource {x:Type Label}}" TargetType="{x:Type local:Label}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:Label}">
                    <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="{TemplateBinding RecognizesAccessKey}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DataTemplate DataType="{x:Type local:ITextBoxModel2}">
        <TextBox>
            <TextBox.Style>
                <util:MergedStyles>
                    <util:MergedStyles.Styles>
                        <x:Array Type="{x:Type Style}">
                            <StaticResource ResourceKey="WinCopies.GUI.Controls.TextBoxStyle" />
                            <StaticResource ResourceKey="TextBoxStyleTextOriented" />
                            <StaticResource ResourceKey="TextBoxStyleSelectionOriented" />
                            <StaticResource ResourceKey="TextBoxStyleTextEditingOriented" />
                            <StaticResource ResourceKey="{x:Type TextBox}" />
                        </x:Array>
                    </util:MergedStyles.Styles>
                </util:MergedStyles>
            </TextBox.Style>
        </TextBox>
    </DataTemplate>

    <DataTemplate DataType="{x:Type local:IButtonTextBoxModel2}">
        <TextBox>
            <TextBox.Style>
                <util:MergedStyles>
                    <util:MergedStyles.Styles>
                        <x:Array Type="{x:Type Style}">
                            <StaticResource ResourceKey="WinCopies.GUI.Controls.ButtonTextBoxStyle" />
                            <StaticResource ResourceKey="WinCopies.GUI.Controls.TextBoxStyle" />
                            <StaticResource ResourceKey="TextBoxStyleTextOriented" />
                            <StaticResource ResourceKey="TextBoxStyleSelectionOriented" />
                            <StaticResource ResourceKey="TextBoxStyleTextEditingOriented" />
                            <StaticResource ResourceKey="{x:Type TextBox}" />
                        </x:Array>
                    </util:MergedStyles.Styles>
                </util:MergedStyles>
            </TextBox.Style>
        </TextBox>
    </DataTemplate>

    <DataTemplate DataType="{x:Type local:IPlaceholderTextBoxModel2}">
        <TextBox>
            <TextBox.Style>
                <util:MergedStyles>
                    <util:MergedStyles.Styles>
                        <x:Array Type="{x:Type Style}">
                            <StaticResource ResourceKey="WinCopies.GUI.Controls.PlaceholderTextBoxStyle" />
                            <StaticResource ResourceKey="WinCopies.GUI.Controls.ButtonTextBoxStyle" />
                            <StaticResource ResourceKey="WinCopies.GUI.Controls.TextBoxStyle" />
                            <StaticResource ResourceKey="TextBoxStyleTextOriented" />
                            <StaticResource ResourceKey="TextBoxStyleSelectionOriented" />
                            <StaticResource ResourceKey="TextBoxStyleTextEditingOriented" />
                            <StaticResource ResourceKey="{x:Type TextBox}" />
                        </x:Array>
                    </util:MergedStyles.Styles>
                </util:MergedStyles>
            </TextBox.Style>
        </TextBox>
    </DataTemplate>

    <Style TargetType="{x:Type local:MenuButton}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Padding" Value="5" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:MenuButton}">
                    <ToggleButton x:Name="templateRoot" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="true" IsChecked="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition SharedSizeGroup="MenuItemIconColumnGroup" Width="Auto"/>
                                <ColumnDefinition />
                                <ColumnDefinition Width="auto" />
                            </Grid.ColumnDefinitions>
                            <ContentPresenter x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
                            <ContentPresenter ContentSource="Header" Grid.Column="1" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            <Path x:Name="DownArrow" Grid.Column="2" Data="{StaticResource DownArrow}" Fill="{StaticResource Menu.Static.Foreground}" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                            <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" HorizontalOffset="-2" IsOpen="{TemplateBinding IsSubmenuOpen}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                <Border x:Name="SubMenuBorder" Background="{StaticResource Menu.Static.Background}" BorderThickness="1" BorderBrush="{StaticResource Menu.Static.Border}" Padding="2">
                                    <ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                        <Grid RenderOptions.ClearTypeHint="Enabled">
                                            <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=SubMenuBorder}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                            </Canvas>
                                            <Rectangle Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" HorizontalAlignment="Left" Margin="29,2,0,2" Width="1"/>
                                            <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
                                        </Grid>
                                    </ScrollViewer>
                                </Border>
                            </Popup>
                        </Grid>
                    </ToggleButton>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                        </Trigger>
                        <!--<Trigger Property="IsHighlighted" Value="True">
                            <Setter Property="Background" TargetName="templateRoot" Value="Transparent"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Border}"/>
                        </Trigger>-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{StaticResource Menu.Disabled.Foreground}"/>
                            <Setter Property="Fill" TargetName="DownArrow" Value="{StaticResource Menu.Disabled.Foreground}"/>
                        </Trigger>
                        <Trigger Property="ScrollViewer.CanContentScroll" SourceName="SubMenuScrollViewer" Value="false">
                            <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
                            <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
                <!--<ControlTemplate TargetType="{x:Type local:ContextToggleMenuButton}">
                    <Menu Background="Transparent" HorizontalAlignment="Left" VerticalAlignment="Top">
                        <MenuItem x:Name="PART_MenuItem" Icon="{TemplateBinding Icon}" Header="{TemplateBinding Header}" HeaderStringFormat="{TemplateBinding HeaderStringFormat}" HeaderTemplate="{TemplateBinding HeaderTemplate}" HeaderTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                  ItemsPanel="{TemplateBinding ItemsPanel}" ItemsSource="{TemplateBinding ItemsSource}" ItemStringFormat="{TemplateBinding ItemStringFormat}"
                                  IsTextSearchEnabled="{TemplateBinding IsTextSearchEnabled}" DisplayMemberPath="{TemplateBinding DisplayMemberPath}" IsTextSearchCaseSensitive="{TemplateBinding IsTextSearchCaseSensitive}" ItemBindingGroup="{TemplateBinding ItemBindingGroup}" AlternationCount="{TemplateBinding AlternationCount}"
                                  Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                            <MenuItem.Style>
                                <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                                    <Setter Property="Template">
                                        <Setter.Value>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </MenuItem.Style>
                        </MenuItem>
                    </Menu>
                </ControlTemplate>-->
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Command, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource IsNullConverter}}" Value="{markup:FalseValue}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type local:MenuButton}">
                            <Button x:Name="templateRoot" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" SnapsToDevicePixels="true" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Command="{TemplateBinding Command}" CommandParameter="{TemplateBinding CommandParameter}" CommandTarget="{TemplateBinding CommandTarget}" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition SharedSizeGroup="MenuItemIconColumnGroup" Width="auto" />
                                        <ColumnDefinition />
                                        <ColumnDefinition Width="auto" />
                                    </Grid.ColumnDefinitions>
                                    <ContentPresenter  x:Name="Icon" ContentSource="Icon" HorizontalAlignment="Center" Height="16" Margin="3" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Width="16"/>
                                    <ContentPresenter Grid.Column="1" ContentSource="Header" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                                    <ToggleButton Grid.Column="2" HorizontalAlignment="Left" VerticalAlignment="Center" IsChecked="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}">
                                        <Path x:Name="DownArrow" Data="{StaticResource DownArrow}" Fill="{StaticResource Menu.Static.Foreground}"/>
                                    </ToggleButton>
                                    <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false" HorizontalOffset="-2" IsOpen="{TemplateBinding IsSubmenuOpen}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                        <Border x:Name="SubMenuBorder" Background="{StaticResource Menu.Static.Background}" BorderThickness="1" BorderBrush="{StaticResource Menu.Static.Border}" Padding="2">
                                            <ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                                    <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                                        <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=SubMenuBorder}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}"/>
                                                    </Canvas>
                                                    <Rectangle Fill="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" HorizontalAlignment="Left" Margin="29,2,0,2" Width="1"/>
                                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="true" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle"/>
                                                </Grid>
                                            </ScrollViewer>
                                        </Border>
                                    </Popup>
                                </Grid>
                            </Button>
                            <ControlTemplate.Triggers>
                                <Trigger Property="Icon" Value="{x:Null}">
                                    <Setter Property="Visibility" TargetName="Icon" Value="Collapsed"/>
                                </Trigger>
                                <!--<Trigger Property="IsHighlighted" Value="True">
                            <Setter Property="Background" TargetName="templateRoot" Value="Transparent"/>
                            <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource MenuItem.Highlight.Border}"/>
                        </Trigger>-->
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{StaticResource Menu.Disabled.Foreground}"/>
                                    <Setter Property="Fill" TargetName="DownArrow" Value="{StaticResource Menu.Disabled.Foreground}"/>
                                </Trigger>
                                <Trigger Property="ScrollViewer.CanContentScroll" SourceName="SubMenuScrollViewer" Value="false">
                                    <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=SubMenuScrollViewer}"/>
                                    <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=SubMenuScrollViewer}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                        <!--<ControlTemplate TargetType="{x:Type local:ContextToggleMenuButton}">
                    <Menu Background="Transparent" HorizontalAlignment="Left" VerticalAlignment="Top">
                        <MenuItem x:Name="PART_MenuItem" Icon="{TemplateBinding Icon}" Header="{TemplateBinding Header}" HeaderStringFormat="{TemplateBinding HeaderStringFormat}" HeaderTemplate="{TemplateBinding HeaderTemplate}" HeaderTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                  ItemsPanel="{TemplateBinding ItemsPanel}" ItemsSource="{TemplateBinding ItemsSource}" ItemStringFormat="{TemplateBinding ItemStringFormat}"
                                  IsTextSearchEnabled="{TemplateBinding IsTextSearchEnabled}" DisplayMemberPath="{TemplateBinding DisplayMemberPath}" IsTextSearchCaseSensitive="{TemplateBinding IsTextSearchCaseSensitive}" ItemBindingGroup="{TemplateBinding ItemBindingGroup}" AlternationCount="{TemplateBinding AlternationCount}"
                                  Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}">
                            <MenuItem.Style>
                                <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                                    <Setter Property="Template">
                                        <Setter.Value>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </MenuItem.Style>
                        </MenuItem>
                    </Menu>
                </ControlTemplate>-->
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type local:Link}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:Link}">
                    <TextBlock>
                        <local:LinkRun Text="{TemplateBinding Content}" Uri="{TemplateBinding Uri}" UnderliningMode="{TemplateBinding UnderliningMode}" NormalForeground="{TemplateBinding NormalForeground}" HighlightedForeground="{TemplateBinding HighlightedForeground}" ActiveForeground="{TemplateBinding ActiveForeground}" SeenForeground="{TemplateBinding SeenForeground}" Seen="{TemplateBinding Seen}" Command="{TemplateBinding Command}" CommandParameter="{TemplateBinding CommandParameter}" CommandTarget="{TemplateBinding CommandTarget}" />
                    </TextBlock>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:DockControl}" BasedOn="{StaticResource {x:Type ContentControl}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:DockControl}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>

                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <ContentPresenter x:Name="PART_Top" Grid.ColumnSpan="3" ContentSource="Top" ContentStringFormat="{TemplateBinding TopStringFormat}" ContentTemplate="{TemplateBinding TopTemplate}" ContentTemplateSelector="{TemplateBinding TopTemplateSelector}" />
                        <ContentPresenter x:Name="PART_Left" Grid.Row="1" ContentSource="Left" ContentStringFormat="{TemplateBinding LeftStringFormat}" ContentTemplate="{TemplateBinding LeftTemplate}" ContentTemplateSelector="{TemplateBinding LeftTemplateSelector}" />
                        <ContentPresenter Grid.Column="1" Grid.Row="1" />
                        <ContentPresenter x:Name="PART_Right" Grid.Column="2" Grid.Row="1" ContentSource="Right" ContentStringFormat="{TemplateBinding RightStringFormat}" ContentTemplate="{TemplateBinding RightTemplate}" ContentTemplateSelector="{TemplateBinding RightTemplateSelector}" />
                        <ContentPresenter x:Name="PART_Bottom" Grid.ColumnSpan="3" Grid.Row="2" ContentSource="Bottom" ContentStringFormat="{TemplateBinding BottomStringFormat}" ContentTemplate="{TemplateBinding BottomTemplate}" ContentTemplateSelector="{TemplateBinding BottomTemplateSelector}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--<Style TargetType="{x:Type local:InlineTextEditor}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:InlineTextEditor}">
                    <StackPanel>
                        <local:Label RecognizesAccessKey="False" Content="{TemplateBinding Text}" />
                        <Button Command="{x:Static commands:Commands.CommonCommand}" Content="{x:Static icons:Resources.textfield_rename}" />
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <DataTrigger Binding="{Binding IsEditing, RelativeSource={RelativeSource Self}}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel>
                                <local:TextBox Text="{TemplateBinding Edit}" Command="{x:Static commands:DialogCommands.Apply}" />
                                -->
    <!--UpdateSourceTrigger=PropertyChanged-->
    <!--
                                <Button Content="{x:Static icons:Resources.accept}" Command="{x:Static commands:DialogCommands.Apply}" />
                                <Button Content="{x:Static icons:Resources.cancel}" Command="{x:Static commands:DialogCommands.Cancel}" />
                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>-->

    <Style TargetType="{x:Type local:PropertyGrid}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:PropertyGrid}">
                    <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="auto" />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>
                                <Image Source="{TemplateBinding Icon}" />
                                <StackPanel Grid.Column="1">
                                    <local:Label Content="{TemplateBinding Header1}" FontSize="16" />
                                    <local:Label Content="{TemplateBinding Header2}" FontSize="12" />
                                </StackPanel>
                            </Grid>
                            <DataGrid Grid.Row="1" ItemsSource="{TemplateBinding Properties}" AutoGenerateColumns="False" CanUserAddRows="False" CanUserDeleteRows="False" CanUserReorderColumns="False" CanUserResizeColumns="True" CanUserResizeRows="False" CanUserSortColumns="False" VerticalScrollBarVisibility="Visible">
                                <!--<DataGrid.ColumnHeaderStyle>
                                    <Style TargetType="{x:Type DataGridColumnHeader}">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                    </Style>
                                </DataGrid.ColumnHeaderStyle>-->
                                <DataGrid.Columns>
                                    <DataGridTextColumn Binding="{Binding DisplayName}" />
                                    <DataGridTemplateColumn IsReadOnly="False">
                                        <DataGridTemplateColumn.CellTemplate>
                                            <DataTemplate>
                                                <!--<local:Label RecognizesAccessKey="False" Content="{Binding}" />-->
                                                <ContentPresenter Content="{Binding Converter={StaticResource PropertyConverter}}">
                                                    <ContentPresenter.ContentTemplateSelector>
                                                        <util:InterfaceDataTemplateSelector />
                                                    </ContentPresenter.ContentTemplateSelector>
                                                </ContentPresenter>
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellTemplate>
                                        <!--<DataGridTemplateColumn.CellEditingTemplate>
                                            <DataTemplate>
                                                <ContentPresenter Content="{Binding}" />
                                            </DataTemplate>
                                        </DataGridTemplateColumn.CellEditingTemplate>-->
                                    </DataGridTemplateColumn>
                                </DataGrid.Columns>
                            </DataGrid>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NavigationButtonItemContainerStyle" TargetType="{x:Type MenuItem}">
        <Setter Property="IsCheckable" Value="True" />
        <Setter Property="IsChecked">
            <Setter.Value>
                <MultiBinding Converter="{StaticResource EqualsConverter}" Mode="OneWay">
                    <Binding Mode="OneWay" />
                    <Binding Path="ItemsSource.Current" Mode="OneWay" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type local:NavigationButton}}" />
                </MultiBinding>
            </Setter.Value>
        </Setter>
        <Setter Property="Command" Value="{x:Static NavigationCommands.GoToPage}" />
        <Setter Property="CommandParameter" Value="{Binding}" />
    </Style>

    <ControlTemplate x:Key="NavigationButtonTemplate" TargetType="{x:Type local:NavigationButton}">
        <StackPanel Orientation="Horizontal">
            <Button Command="{x:Static NavigationCommands.BrowseBack}" Style="{TemplateBinding GoBackButtonStyle}" />
            <Button Command="{x:Static NavigationCommands.BrowseForward}" Style="{TemplateBinding GoForwardButtonStyle}" />
            <local:MenuButton ItemsSource="{TemplateBinding ItemsSource}" ItemContainerStyle="{TemplateBinding ItemContainerStyle}" />
        </StackPanel>
    </ControlTemplate>

    <Style TargetType="{x:Type local:NavigationButton}">
        <Setter Property="Template" Value="{StaticResource NavigationButtonTemplate}" />
        <Setter Property="CommandParameter" Value="{Binding ItemsSource.Current, RelativeSource={RelativeSource Mode=Self}}" />
        <Setter Property="ItemContainerStyle" Value="{StaticResource NavigationButtonItemContainerStyle}" />
    </Style>
</ResourceDictionary>
