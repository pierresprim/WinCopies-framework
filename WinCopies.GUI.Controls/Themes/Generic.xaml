<ResourceDictionary x:Class="WinCopies.GUI.Controls.Themes.Generic"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:local="clr-namespace:WinCopies.GUI.Controls">

    <Image x:Key="MenuItemImage" x:Shared="false" Source="{Binding Icon}" />

    <!--<ResourceDictionary.MergedDictionaries>
        <ResourceDictionary>
            <sys:String x:Key="RecentlyClosedTabs" >Onglets récemment fermés</sys:String>
        </ResourceDictionary>
    </ResourceDictionary.MergedDictionaries>-->
    <!--<Style TargetType="{x:Type local:CustomControl1}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:CustomControl1}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">

                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->
    <Style TargetType="{x:Type local:PopupMenuButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:PopupMenuButton}">
                    <!--<Menu>
                        <MenuItem>
                            <MenuItem.Style>
                                <Style TargetType="{x:Type MenuItem}">
                                    <Setter Property="Template" >
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type MenuItem}">-->
                    <Grid>
                        <ToggleButton Content="{TemplateBinding Header}" IsChecked="{Binding IsSubmenuOpen, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                        <Popup x:Name="PART_Popup" AllowsTransparency="True" Focusable="False" IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}" Placement="Bottom">
                            <Border x:Name="SubMenuBorder" BorderBrush="#FF999999" BorderThickness="1" Background="#FFF0F0F0" Padding="2">
                                <ScrollViewer x:Name="SubMenuScrollViewer" Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                    <Grid RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                            <Rectangle x:Name="OpaqueRect" Fill="{Binding Background, ElementName=SubMenuBorder}" Height="{Binding ActualHeight, ElementName=SubMenuBorder}" Width="{Binding ActualWidth, ElementName=SubMenuBorder}" />
                                        </Canvas>
                                        <Rectangle Fill="#FFD7D7D7" HorizontalAlignment="Left" Margin="29,2,0,2" Width="1" />
                                        <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle" Grid.IsSharedSizeScope="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" KeyboardNavigation.TabNavigation="Cycle" />
                                    </Grid>
                                </ScrollViewer>
                            </Border>
                        </Popup>
                    </Grid>
                    <!--</ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </MenuItem.Style>
                        </MenuItem>
                    </Menu>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <SolidColorBrush x:Key="TabItem.Selected.Background" Color="#FFFFFF" />
    <SolidColorBrush x:Key="TabItem.Selected.Border" Color="#ACACAC" />
    <Style TargetType="{x:Type local:TabControl}" >
        <Setter Property="Padding" Value="2" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{StaticResource TabItem.Selected.Background}" />
        <Setter Property="BorderBrush" Value="{StaticResource TabItem.Selected.Border}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:TabControl}">
                    <Grid x:Name="templateRoot" ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0" />
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto" />
                            <RowDefinition x:Name="RowDefinition1" Height="*" />
                        </Grid.RowDefinitions>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto" />
                                <ColumnDefinition />
                                <ColumnDefinition Width="auto" />
                                <ColumnDefinition Width="auto" />
                            </Grid.ColumnDefinitions>
                            <RepeatButton IsEnabled="{Binding CanScrollToLeft, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:TabControl}}}" Click="ScrollToLeftButton_Click" MouseDoubleClick="ScrollToLeftButton_MouseDoubleClick">&lt;</RepeatButton>
                            <ScrollViewer x:Name="PART_ScrollViewer" Grid.Column="1" ScrollViewer.HorizontalScrollBarVisibility="Auto" ScrollViewer.VerticalScrollBarVisibility="Disabled">
                                <TabPanel x:Name="headerPanel" Background="Transparent" IsItemsHost="true" Margin="2,2,2,0" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
                            </ScrollViewer>
                            <RepeatButton Grid.Column="2" IsEnabled="{Binding CanScrollToRight, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:TabControl}}}" Click="ScrollToRightButton_Click" MouseDoubleClick="ScrollToRightButton_MouseDoubleClick">&gt;</RepeatButton>
                            <ContentPresenter Grid.Column="3" Content="{Binding TabMenu, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:TabControl}}}" >
                                <ContentPresenter.Style>
                                    <Style TargetType="{x:Type ContentPresenter}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding TabMenu, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:TabControl}}}" Value="{x:Null}">
                                                <Setter Property="Visibility" Value="Collapsed" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ContentPresenter.Style>
                            </ContentPresenter>

                            <!--<local:PopupMenuButton Grid.Column="3">
                                    <local:PopupMenuButton.Style>
                                        <Style TargetType="{x:Type local:PopupMenuButton}">
                                            <Setter Property="Header" Value="▼" />
                                            <Setter Property="IsCheckable" Value="True" />
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type MenuItem}">
                                                        <Grid>
                                                            <ToggleButton IsChecked="{Binding IsChecked, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                                                            <ContentPresenter Content="{Binding TabMenu, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}}" />
                                                        </Grid>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding TabMenu, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:TabControl}}}" Value="{x:Null}">
                                                    <Setter Property="Visibility" Value="Collapsed" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </local:PopupMenuButton.Style>
                                </local:PopupMenuButton>-->

                        </Grid>
                        <Border x:Name="contentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="0" KeyboardNavigation.DirectionalNavigation="Contained" Grid.Row="1" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
                            <ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="1" />
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="Auto" />
                            <Setter Property="Margin" TargetName="headerPanel" Value="2,0,2,2" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="0" />
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="headerPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="contentPanel" Value="1" />
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto" />
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
                            <Setter Property="Margin" TargetName="headerPanel" Value="2,2,0,2" />
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="0" />
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0" />
                            <Setter Property="Grid.Column" TargetName="headerPanel" Value="1" />
                            <Setter Property="Grid.Column" TargetName="contentPanel" Value="0" />
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="*" />
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto" />
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*" />
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0" />
                            <Setter Property="Margin" TargetName="headerPanel" Value="0,2,2,2" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
                <!--<ControlTemplate TargetType="{x:Type local:TabControl}">
                    <ProgressBar></ProgressBar>
                </ControlTemplate>-->
            </Setter.Value>
        </Setter>
        <!--<Setter Property="TabMenu">
            <Setter.Value>
                <local:PopupMenuButton>
                    <MenuItem Header="{StaticResource RecentlyClosedTabs}" ItemsSource="{Binding RecentlyClosedTabs, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:TabControl}}}">

                    </MenuItem>
                </local:PopupMenuButton>
            </Setter.Value>
        </Setter>-->
    </Style>

    <SolidColorBrush x:Key="ListBox.Static.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ListBox.Static.Border" Color="#FFABADB3"/>
    <SolidColorBrush x:Key="ListBox.Disabled.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ListBox.Disabled.Border" Color="#FFD9D9D9"/>
    <Style TargetType="{x:Type local:ListView}">
        <Setter Property="Background" Value="{StaticResource ListBox.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ListBox.Static.Border}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ListView}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="1" SnapsToDevicePixels="true">
                        <ScrollViewer x:Name="PART_ScrollViewer" Focusable="false" Padding="{TemplateBinding Padding}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </ScrollViewer>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource ListBox.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource ListBox.Disabled.Border}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsGrouping" Value="true"/>
                                <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:ProgressBar}">
        <Setter Property="Background" >
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FFF7F7F7"/>
                    <GradientStop Color="#FFD1D1D1" Offset="0.5"/>
                    <GradientStop Color="#FFF7F7F7" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" >
            <Setter.Value>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="#FFCDFFC1" Offset="0"/>
                    <GradientStop Color="#FF86EC6E" Offset="0.5"/>
                    <GradientStop Color="#FFCDFFC1" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="CacheMode">
            <Setter.Value>
                <BitmapCache EnableClearType="True" />
            </Setter.Value>
        </Setter>
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ProgressBar}">
                    <Grid>
                        <Rectangle Fill="{TemplateBinding Background}" RadiusX="5" RadiusY="5" Stroke="#FFB0B0B0" />
                        <!--<ContentPresenter VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Content="{TemplateBinding Content}"/>-->
                        <local:ProgressRectangle>
                            <local:ProgressRectangle.Style>
                                <Style TargetType="{x:Type local:ProgressRectangle}" >
                                    <Setter Property="HorizontalAlignment" Value="Left" />
                                    <Setter Property="Background" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                                    <Setter Property="Width" >
                                        <Setter.Value>
                                            <MultiBinding Converter="{local:ProgressRectangleConverter}">
                                                <Binding Path="ProcessStatus" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                                                <Binding Path="Value" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                                                <Binding Path="Maximum" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                                                <Binding Path="ActualWidth" RelativeSource="{RelativeSource Mode=TemplatedParent}" />
                                            </MultiBinding>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </local:ProgressRectangle.Style>
                        </local:ProgressRectangle>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <DataTrigger Binding="{Binding ProcessStatus, RelativeSource={RelativeSource Mode=Self}}" Value="Paused" >
                <Setter Property="Foreground" >
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0" >
                            <GradientStop Color="#FFE200" Offset="0"/>
                            <GradientStop Color="#FFCC00" Offset="0.5"/>
                            <GradientStop Color="#FFE200" Offset="1"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding ProcessStatus, RelativeSource={RelativeSource Mode=Self}}" Value="Error" >
                <Setter Property="Foreground" >
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0" >
                            <GradientStop Color="#FFF5F5" Offset="0" />
                            <GradientStop Color="#FF0000" Offset="0.5" />
                            <GradientStop Color="#FFF5F5" Offset="1" />
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type local:ProgressRectangle}">
        <Setter Property="CacheMode" >
            <Setter.Value>
                <BitmapCache EnableClearType="True"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ProgressRectangle}">
                    <Grid>
                        <Rectangle Fill="{TemplateBinding Background}" RadiusX="5" RadiusY="5" Stroke="#FFB0B0B0" />
                        <Grid>
                            <Rectangle x:Name="PART_Rectangle" HorizontalAlignment="Left" Width="50" Margin="-50,0,0,0">
                                <Rectangle.Fill>
                                    <LinearGradientBrush EndPoint="1,1" StartPoint="0,1" Opacity="0.8">
                                        <GradientStop Color="Transparent" Offset="0"/>
                                        <GradientStop Color="White" Offset="0.5"/>
                                        <GradientStop Color="Transparent" Offset="1"/>
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                            <!--
        <Rectangle x:Name="TopRectangle" Height="6" HorizontalAlignment="Left" VerticalAlignment="Top" Width="60" Margin="-55,0,0,0">
            <Rectangle.Fill>
                <LinearGradientBrush EndPoint="1,1" StartPoint="0,1">
                    <GradientStop Color="Transparent" Offset="0"/>
                    <GradientStop Color="White" Offset="0.5"/>
                    <GradientStop Color="Transparent" Offset="1"/>
                </LinearGradientBrush>
            </Rectangle.Fill>
        </Rectangle>
        -->
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource {x:Type TextBox}}" TargetType="{x:Type local:TextBox}" >
        <Setter Property="Text" Value="{Binding RealText, RelativeSource={RelativeSource Mode=Self}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
        <Style.Triggers >
            <DataTrigger Binding="{Binding IsPlaceholderActive, RelativeSource={RelativeSource Mode=Self}}" Value="true" >
                <Setter Property="Text" Value="{Binding PlaceholderProperties.Text, RelativeSource={RelativeSource Mode=Self}}" />

                <Setter Property="AcceptsReturn" Value="{Binding PlaceholderProperties.AcceptsReturn, RelativeSource={RelativeSource Mode=Self}}" />
                <Setter Property="AcceptsTab" Value="{Binding PlaceholderProperties.AcceptsTab, RelativeSource={RelativeSource Mode=Self}}" />
                <Setter Property="FontFamily" Value="{Binding PlaceholderProperties.FontFamily, RelativeSource={RelativeSource Mode=Self}}" />
                <Setter Property="FontSize" Value="{Binding PlaceholderProperties.FontSize, RelativeSource={RelativeSource Mode=Self}}" />
                <Setter Property="FontStretch" Value="{Binding PlaceholderProperties.FontStretch, RelativeSource={RelativeSource Mode=Self}}" />
                <Setter Property="FontStyle" Value="{Binding PlaceholderProperties.FontStyle, RelativeSource={RelativeSource Mode=Self}}" />
                <Setter Property="FontWeight" Value="{Binding PlaceholderProperties.FontWeight, RelativeSource={RelativeSource Mode=Self}}" />
                <Setter Property="Foreground" Value="{Binding PlaceholderProperties.Foreground, RelativeSource={RelativeSource Mode=Self}}" />
                <Setter Property="TextAlignment" Value="{Binding PlaceholderProperties.TextAlignment, RelativeSource={RelativeSource Mode=Self}}" />
                <Setter Property="TextDecorations" Value="{Binding PlaceholderProperties.TextDecorations, RelativeSource={RelativeSource Mode=Self}}" />
                <Setter Property="TextWrapping" Value="{Binding PlaceholderProperties.TextWrapping, RelativeSource={RelativeSource Mode=Self}}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ReadOnlyTextBoxStyle" TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type TextBox}}" >
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="IsReadOnly" Value="True" />
        <Setter Property="IsReadOnlyCaretVisible" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type local:Link}" BasedOn="{StaticResource {x:Type Label}}" >
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:Link}">
                    <local:LinkRun x:Name="LinkRun" Uri="{Binding Uri, RelativeSource={RelativeSource Mode=TemplatedParent}}" UnderliningMode="{Binding UnderliningMode, RelativeSource={RelativeSource Mode=TemplatedParent}}" NormalForeground="{Binding NormalForeground, RelativeSource={RelativeSource Mode=TemplatedParent}}" HighlightedForeground="{Binding HighlightedForeground, RelativeSource={RelativeSource Mode=TemplatedParent}}" ActiveForeground="{Binding ActiveForeground, RelativeSource={RelativeSource Mode=TemplatedParent}}" SeenForeground="{Binding SeenForeground, RelativeSource={RelativeSource Mode=TemplatedParent}}" Seen="{Binding Seen, RelativeSource={RelativeSource Mode=TemplatedParent}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource {x:Type Label}}" TargetType="{x:Type local:Label}" >
        <Setter Property="Template" >
            <Setter.Value >
                <ControlTemplate TargetType="{x:Type Label}" >
                    <ContentPresenter Margin="{Binding Padding, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:Label}}}" RecognizesAccessKey="{Binding RecognizesAccessKey, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:Label}}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MenuItemStyle" BasedOn="{StaticResource {x:Type MenuItem}}" TargetType="{x:Type MenuItem}" >
        <Setter Property="Header" Value="{Binding Header}" />
        <Setter Property="Icon" >
            <Setter.Value>
                <StaticResource ResourceKey="MenuItemImage" />
            </Setter.Value>
        </Setter>
        <Setter Property="Command" Value="{Binding Command}" />
        <Setter Property="CommandParameter" Value="{Binding CommandParameter}" />
        <Setter Property="CommandTarget" Value="{Binding CommandTarget}" />
        <Setter Property="IsCheckable" Value="{Binding IsCheckable}" />
        <Setter Property="IsChecked" Value="{Binding IsChecked}" />
        <Setter Property="ItemsSource" Value="{Binding Items}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsSeparator}" Value="true" >
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate >
                            <Separator />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="TreeViewItemFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>
    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="Transparent" Height="16" Padding="5,5,5,5" Width="16">
                        <Path x:Name="ExpandPath" Data="{StaticResource TreeArrow}" Fill="Transparent" Stroke="#FF989898">
                            <Path.RenderTransform>
                                <RotateTransform Angle="135" CenterY="3" CenterX="3"/>
                            </Path.RenderTransform>
                        </Path>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF1BBBFA"/>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="RenderTransform" TargetName="ExpandPath">
                                <Setter.Value>
                                    <RotateTransform Angle="180" CenterY="3" CenterX="3"/>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Fill" TargetName="ExpandPath" Value="#FF595959"/>
                            <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF262626"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:TreeViewItem}" >
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Padding" Value="1,0,0,0"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:TreeViewItem}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition MinWidth="19" Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <ToggleButton x:Name="Expander" ClickMode="Press" IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ExpandCollapseToggleStyle}"/>
                        <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="1" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Grid.ColumnSpan="2" Grid.Column="1" Grid.Row="1"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                        </Trigger>
                        <MultiTrigger >
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true" />
                                <Condition Property="IsFocusSelection" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                                <Condition Property="IsFocusSelection" Value="false" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="true" />
                                <Condition Property="IsSelected" Value="false" />
                            </MultiTrigger.Conditions>
                            <!--todo: put this in a static resource-->
                            <Setter Property="Background" TargetName="Bd" Value="AliceBlue"/>
                        </MultiTrigger>
                        <Trigger Property="IsFocusSelection" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="AliceBlue"/>
                            <!--<Setter Property="FocusVisualStyle" Value="{x:Null}" />-->
                        </Trigger>
                        <Trigger Property="IsPreviouslySelectedItem" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="VirtualizingStackPanel.IsVirtualizing" Value="true">
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
        <!--<Setter Property="Background" Value="AliceBlue" />-->
    </Style>
</ResourceDictionary>
