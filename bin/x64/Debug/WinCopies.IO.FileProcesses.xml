<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WinCopies.IO.FileProcesses</name>
    </assembly>
    <members>
        <member name="T:WinCopies.IO.FileProcesses.ActionType">
            <summary>
            Énumération servant à décrire le type de processus de fichiers en cours
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.ActionType.Unknown">
            <summary>
            The process is not determinated.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.ActionType.Copy">
            <summary>
            The process is a copy.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.ActionType.Move">
            <summary>
            The process is a file move.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.ActionType.MoveToRecycleBin">
            <summary>
            The process is a file move to the Windows Recycle bin.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.ActionType.Deletion">
            <summary>
            The process is a deletion.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.ActionType.Search">
            <summary>
            The process is a file search.
            </summary>
        </member>
        <member name="T:WinCopies.IO.FileProcesses.Copy">
            <summary>
            A class that provides static methods to copy files. The doc is from the following Microsoft's doc page: https://docs.microsoft.com/en-us/windows/desktop/api/winbase/nc-winbase-lpprogress_routine.
            </summary>
        </member>
        <member name="M:WinCopies.IO.FileProcesses.Copy.CopyFileEx(System.String,System.String,WinCopies.IO.FileProcesses.Copy.CopyProgressRoutine,System.IntPtr,System.Int32@,WinCopies.IO.FileProcesses.Copy.CopyFileFlags)">
             <summary>
             <para>Copies an existing file to a new file, notifying the application of its progress through a callback function.</para>
            
             <para>To perform this operation as a transacted operation, use the CopyFileTransacted function.</para>
             </summary>
             <param name="lpExistingFileName"><para>The name of an existing file.</para>
            
             <para>In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend "\?" to the path.For more information, see Naming a File.</para>
             <para>Tip Starting in Windows 10, version 1607, for the unicode version of this function (CopyFileExW), you can opt-in to remove the MAX_PATH character limitation without prepending "\\?\". See the "Maximum Path Limitation" section of Naming Files, Paths, and Namespaces for details.</para>
            
            <para>If lpExistingFileName does not exist, the <see cref="M:WinCopies.IO.FileProcesses.Copy.CopyFileEx(System.String,System.String,WinCopies.IO.FileProcesses.Copy.CopyProgressRoutine,System.IntPtr,System.Int32@,WinCopies.IO.FileProcesses.Copy.CopyFileFlags)"/> function fails, and the <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> function returns <see cref="!:NativeWin32FilesProcessesErrorCodes.ERROR_FILE_NOT_FOUND"/>.</para></param>
             <param name="lpNewFileName"><para>The name of the new file.</para>
            
             <para>In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend "\?" to the path.For more information, see Naming a File.</para>
            
             <para>Tip Starting inWindows 10, version 1607, for the unicode version of this function (CopyFileExW), you can opt-in to remove the MAX_PATH character limitation without prepending "\\?\". See the "Maximum Path Limitation" section of Naming Files, Paths, and Namespaces for details.</para></param>
             <param name="lpProgressRoutine">The address of a callback function of type <see cref="T:WinCopies.IO.FileProcesses.Copy.CopyProgressRoutine"/> that is called each time another portion of the file has been copied. This parameter can be <see langword="null"/>. For more information on the progress callback function, see the <see cref="T:WinCopies.IO.FileProcesses.Copy.CopyProgressRoutine"/> function.</param>
             <param name="lpData">The argument to be passed to the callback function. This parameter can be <see langword="null"/>.</param>
             <param name="pbCancel">If this flag is set to <see langword="true"/> during the copy operation, the operation is canceled. Otherwise, the copy operation will continue to completion.</param>
             <param name="dwCopyFlags">Flags that specify how the file is to be copied. This parameter can be a combination of the <see cref="T:WinCopies.IO.FileProcesses.Copy.CopyFileFlags"/> enum.</param>
             <returns><para>If the function succeeds, the return value is nonzero.</para>
            
             <para>If the function fails, the return value is zero.To get extended error information call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.</para>
            
             <para>If lpProgressRoutine returns <see cref="F:WinCopies.IO.FileProcesses.Copy.CopyProgressResult.PROGRESS_CANCEL"/> due to the user canceling the operation, <see cref="M:WinCopies.IO.FileProcesses.Copy.CopyFileEx(System.String,System.String,WinCopies.IO.FileProcesses.Copy.CopyProgressRoutine,System.IntPtr,System.Int32@,WinCopies.IO.FileProcesses.Copy.CopyFileFlags)"/> will return zero and <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> will return <see cref="F:WinCopies.Util.Win32ErrorCodes.ERROR_REQUEST_ABORTED"/>. In this case, the partially copied destination file is deleted.</para>
            
             <para>If lpProgressRoutine returns <see cref="F:WinCopies.IO.FileProcesses.Copy.CopyProgressResult.PROGRESS_STOP"/> due to the user stopping the operation, <see cref="M:WinCopies.IO.FileProcesses.Copy.CopyFileEx(System.String,System.String,WinCopies.IO.FileProcesses.Copy.CopyProgressRoutine,System.IntPtr,System.Int32@,WinCopies.IO.FileProcesses.Copy.CopyFileFlags)"/> will return zero and <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> will return <see cref="F:WinCopies.Util.Win32ErrorCodes.ERROR_REQUEST_ABORTED"/>. In this case, the partially copied destination file is left intact.</para></returns>
             <remarks><para>This function preserves extended attributes, OLE structured storage, NTFS file system alternate data streams, security resource attributes, and file attributes.</para>
            
             <para>Windows 7, Windows Server 2008 R2, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  Security resource attributes(ATTRIBUTE_SECURITY_INFORMATION) for the existing file are not copied to the new file until Windows 8 and Windows Server 2012.</para>
            
             <para>The security resource properties(ATTRIBUTE_SECURITY_INFORMATION) for the existing file are copied to the new file.</para>
            
             <para>Windows 7, Windows Server 2008 R2, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  Security resource properties for the existing file are not copied to the new file until Windows 8 and Windows Server 2012.</para>
            
             <para>This function fails with <see cref="!:NativeWin32FilesProcessesErrorCodes.ERROR_ACCESS_DENIED"/> if the destination file already exists and has the <see cref="F:System.IO.FileAttributes.Hidden"/> or <see cref="F:System.IO.FileAttributes.ReadOnly"/> attribute set.</para>
            
             <para>When encrypted files are copied using <see cref="M:WinCopies.IO.FileProcesses.Copy.CopyFileEx(System.String,System.String,WinCopies.IO.FileProcesses.Copy.CopyProgressRoutine,System.IntPtr,System.Int32@,WinCopies.IO.FileProcesses.Copy.CopyFileFlags)"/>, the function attempts to encrypt the destination file with the keys used in the encryption of the source file.If this cannot be done, this function attempts to encrypt the destination file with default keys.If both of these methods cannot be done, <see cref="M:WinCopies.IO.FileProcesses.Copy.CopyFileEx(System.String,System.String,WinCopies.IO.FileProcesses.Copy.CopyProgressRoutine,System.IntPtr,System.Int32@,WinCopies.IO.FileProcesses.Copy.CopyFileFlags)"/> fails with an <see cref="F:WinCopies.Util.Win32ErrorCodes.ERROR_ENCRYPTION_FAILED"/> error code. If you want <see cref="M:WinCopies.IO.FileProcesses.Copy.CopyFileEx(System.String,System.String,WinCopies.IO.FileProcesses.Copy.CopyProgressRoutine,System.IntPtr,System.Int32@,WinCopies.IO.FileProcesses.Copy.CopyFileFlags)"/> to complete the copy operation even if the destination file cannot be encrypted, include the <see cref="F:WinCopies.IO.FileProcesses.Copy.CopyFileFlags.COPY_FILE_ALLOW_DECRYPTED_DESTINATION"/> as the value of the dwCopyFlags parameter in your call to <see cref="M:WinCopies.IO.FileProcesses.Copy.CopyFileEx(System.String,System.String,WinCopies.IO.FileProcesses.Copy.CopyProgressRoutine,System.IntPtr,System.Int32@,WinCopies.IO.FileProcesses.Copy.CopyFileFlags)"/>.</para>
            
             If <see cref="F:WinCopies.IO.FileProcesses.Copy.CopyFileFlags.COPY_FILE_COPY_SYMLINK"/> is specified, the following rules apply:
            
             If the source file is a symbolic link, the symbolic link is copied, not the target file.
             If the source file is not a symbolic link, there is no change in behavior.
             If the destination file is an existing symbolic link, the symbolic link is overwritten, not the target file.
             If <see cref="F:WinCopies.IO.FileProcesses.Copy.CopyFileFlags.COPY_FILE_FAIL_IF_EXISTS"/> is also specified, and the destination file is an existing symbolic link, the operation fails in all cases.
            
             If <see cref="F:WinCopies.IO.FileProcesses.Copy.CopyFileFlags.COPY_FILE_COPY_SYMLINK"/> is not specified, the following rules apply:
            
             If <see cref="F:WinCopies.IO.FileProcesses.Copy.CopyFileFlags.COPY_FILE_FAIL_IF_EXISTS"/> is also specified, and the destination file is an existing symbolic link, the operation fails only if the target of the symbolic link exists.
             If <see cref="F:WinCopies.IO.FileProcesses.Copy.CopyFileFlags.COPY_FILE_FAIL_IF_EXISTS"/> is not specified, there is no change in behavior.
            
             Windows 7, Windows Server 2008 R2, Windows Server 2008, Windows Vista, Windows Server 2003 and Windows XP:  If you are writing an application that is optimizing file copy operations across a LAN, consider using the TransmitFile function from Windows Sockets(Winsock). TransmitFile supports high-performance network transfers and provides a simple interface to send the contents of a file to a remote computer.To use TransmitFile, you must write a Winsock client application that sends the file from the source computer as well as a Winsock server application that uses other Winsock functions to receive the file on the remote computer.
            
             In Windows 8 and Windows Server 2012, this function is supported by the following technologies.
             Technology Supported
             Server Message Block (SMB) 3.0 protocol Yes
             SMB 3.0 Transparent Failover (TFO) Yes
             SMB 3.0 with Scale-out File Shares (SO) Yes
             Cluster Shared Volume File System (CsvFS) Yes
             Resilient File System (ReFS) Yes </remarks>
        </member>
        <member name="T:WinCopies.IO.FileProcesses.Copy.CopyProgressRoutine">
            <summary>
            An application-defined callback function used with the <see cref="M:WinCopies.IO.FileProcesses.Copy.CopyFileEx(System.String,System.String,WinCopies.IO.FileProcesses.Copy.CopyProgressRoutine,System.IntPtr,System.Int32@,WinCopies.IO.FileProcesses.Copy.CopyFileFlags)"/>, MoveFileTransacted, and MoveFileWithProgress functions. It is called when a portion of a copy or move operation is completed. The LPPROGRESS_ROUTINE type defines a pointer to this callback function. CopyProgressRoutine is a placeholder for the application-defined function name.
            </summary>
            <param name="TotalFileSize">The total size of the file, in bytes.</param>
            <param name="TotalBytesTransferred">The total number of bytes transferred from the source file to the destination file since the copy operation began.</param>
            <param name="StreamSize">The total size of the current file stream, in bytes.</param>
            <param name="StreamBytesTransferred">The total number of bytes in the current stream that have been transferred from the source file to the destination file since the copy operation began.</param>
            <param name="dwStreamNumber">A handle to the current stream. The first time CopyProgressRoutine is called, the stream number is 1.</param>
            <param name="dwCallbackReason">The reason that <see cref="T:WinCopies.IO.FileProcesses.Copy.CopyProgressRoutine"/> was called. This parameter can be one of the values of the <see cref="T:WinCopies.IO.FileProcesses.Copy.CopyProgressCallbackReason"/> enum.</param>
            <param name="hSourceFile">A handle to the source file.</param>
            <param name="hDestinationFile">A handle to the destination file.</param>
            <param name="lpData">Argument passed to CopyProgressRoutine by <see cref="M:WinCopies.IO.FileProcesses.Copy.CopyFileEx(System.String,System.String,WinCopies.IO.FileProcesses.Copy.CopyProgressRoutine,System.IntPtr,System.Int32@,WinCopies.IO.FileProcesses.Copy.CopyFileFlags)"/>, MoveFileTransacted, or MoveFileWithProgress.</param>
            <returns>The CopyProgressRoutine function should return one of the values of the <see cref="T:WinCopies.IO.FileProcesses.Copy.CopyProgressResult"/> enum.</returns>
            <remarks>An application can use this information to display a progress bar that shows the total number of bytes copied as a percent of the total file size.</remarks>
        </member>
        <member name="T:WinCopies.IO.FileProcesses.Copy.CopyProgressResult">
            <summary>
            The result that is returned by the <see cref="T:WinCopies.IO.FileProcesses.Copy.CopyProgressRoutine"/> function.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Copy.CopyProgressResult.PROGRESS_CONTINUE">
            <summary>
            Continue the copy operation.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Copy.CopyProgressResult.PROGRESS_CANCEL">
            <summary>
            Cancel the copy operation and delete the destination file.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Copy.CopyProgressResult.PROGRESS_STOP">
            <summary>
            Stop the copy operation. It can be restarted at a later time.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Copy.CopyProgressResult.PROGRESS_QUIET">
            <summary>
            Continue the copy operation, but stop invoking CopyProgressRoutine to report progress.
            </summary>
        </member>
        <member name="T:WinCopies.IO.FileProcesses.Copy.CopyProgressCallbackReason">
            <summary>
            The reason that <see cref="T:WinCopies.IO.FileProcesses.Copy.CopyProgressRoutine"/> was called.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Copy.CopyProgressCallbackReason.CALLBACK_CHUNK_FINISHED">
            <summary>
            Another part of the data file was copied.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Copy.CopyProgressCallbackReason.CALLBACK_STREAM_SWITCH">
            <summary>
            Another stream was created and is about to be copied. This is the callback reason given when the callback routine is first invoked. 
            </summary>
        </member>
        <member name="T:WinCopies.IO.FileProcesses.Copy.CopyFileFlags">
            <summary>
            Flags that specify how the file is to be copied.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Copy.CopyFileFlags.COPY_FILE_FAIL_IF_EXISTS">
            <summary>
            The copy operation fails immediately if the target file already exists.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Copy.CopyFileFlags.COPY_FILE_RESTARTABLE">
            <summary>
            Progress of the copy is tracked in the target file in case the copy fails. The failed copy can be restarted at a later time by specifying the same values for lpExistingFileName and lpNewFileName as those used in the call that failed. This can significantly slow down the copy operation as the new file may be flushed multiple times during the copy operation.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Copy.CopyFileFlags.COPY_FILE_OPEN_SOURCE_FOR_WRITE">
            <summary>
            The file is copied and the original file is opened for write access.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Copy.CopyFileFlags.COPY_FILE_ALLOW_DECRYPTED_DESTINATION">
            <summary>
            An attempt to copy an encrypted file will succeed even if the destination copy cannot be encrypted.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Copy.CopyFileFlags.COPY_FILE_COPY_SYMLINK">
             <summary>
             If the source file is a symbolic link, the destination file is also a symbolic link pointing to the same file that the source symbolic link is pointing to.
            
             Windows Server 2003 and Windows XP:  This value is not supported.
             </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Copy.CopyFileFlags.COPY_FILE_NO_BUFFERING">
             <summary>
             The copy operation is performed using unbuffered I/O, bypassing system I/O cache resources. Recommended for very large file transfers.
            
             Windows Server 2003 and Windows XP:  This value is not supported.
             </summary>
        </member>
        <member name="T:WinCopies.IO.FileProcesses.CopyProcessInfo">
            <summary>
            Provides instance methods and properties to copy files and folders. This class inherits of <see cref="T:WinCopies.IO.FileProcesses.Process"/>.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.CopyProcessInfo.PausedFile">
            <summary>
            If a copy is paused during copying, this property gets the file paused, otherwise it returns null.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.CopyProcessInfo.CopiedFiles">
            <summary>
            Gets the number of copied files.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.CopyProcessInfo.HowToRetryWhenExceptionOccured">
            <summary>
            Gets or sets a value that indicates how to retry to copy the file system objects.
            </summary>
            <remarks>If this property is set, this property have to be set to null individually for all the path items.</remarks>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.CopyProcessInfo.IsAFileMoving">
            <summary>
            Gets or sets a value that indicates if this module represents a file moving. True for moving directly the selected file system objects if the moving is running on the same drive for both the source and destination paths or deleting the original file system objects if the moving is running on multiple drives. False for copying all the file system objects each time and keep the original file system objects.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.CopyProcessInfo.CurrentCopiedFile">
            <summary>
            Gets the file which is copying or moving.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.CopyProcessInfo.DestPath">
            <summary>
            Gets the destination path to copy or moving the files.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.CopyProcessInfo.CurrentCopiedSize">
            <summary>
            Gets the total current copied size.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.CopyProcessInfo.CurrentFileCopiedSize">
            <summary>
            Gets the current file copied size.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.CopyProcessInfo.Exceptions">
            <summary>
            Gets a <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1"/> which represents the files for which a <see cref="T:WinCopies.IO.FileProcesses.Exceptions"/> exception has occurred.
            </summary>
        </member>
        <member name="M:WinCopies.IO.FileProcesses.CopyProcessInfo.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:WinCopies.IO.FileProcesses.CopyProcessInfo"/> which will keep in memory the source files and folders.
            </summary>
            <param name="destPath">Destination folder path for copying the source files and folders</param>
            <param name="isAFileMoving">True if the process is a file moving</param>
        </member>
        <member name="M:WinCopies.IO.FileProcesses.CopyProcessInfo.StartCopy">
            <summary>
            Starts the copy.
            </summary>
        </member>
        <member name="M:WinCopies.IO.FileProcesses.CopyProcessInfo.StartCopy(System.Boolean)">
            <summary>
            Starts the copy with the possibility to copy only the first item.
            </summary>
            <param name="onlyFirstFile">Define if the process must be copy or move only the first item</param>
        </member>
        <member name="M:WinCopies.IO.FileProcesses.DeleteProcessInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.IO.FileProcesses.DeleteProcessInfo"/> class.
            </summary>
        </member>
        <member name="T:WinCopies.IO.FileProcesses.DestinationEqualsSourceException">
            <summary>
            Représente les erreurs qui se produisent lorsque la destination d'un répertoire est égale à sa source lors d'un processus de copie ou de déplacement.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.DestinationEqualsSourceException.Dest_Path">
            <summary>
            Répertoire de destination.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.DestinationEqualsSourceException.Path_With_Conflict">
            <summary>
            Le répertoire initial représentant le conflit.
            </summary>
        </member>
        <member name="M:WinCopies.IO.FileProcesses.DestinationEqualsSourceException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:WinCopies.IO.FileProcesses.DestinationEqualsSourceException"/>.
            </summary>
            <param name="message">Message décrivant l'exception.</param>
            <param name="dest_path">Répertoire de destination.</param>
            <param name="path_with_conflict">Répertoire initial représentant le conflit.</param>
        </member>
        <member name="T:WinCopies.IO.FileProcesses.Exceptions">
            <summary>
            Exception types can occur when file system objects processes.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Exceptions.None">
            <summary>
            The process has completed successfully.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Exceptions.Unknown">
            <summary>
            The process has encoutered an unknown exception.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Exceptions.FileNotFound">
            <summary>
            The file couldn't be found.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Exceptions.PathNotFound">
            <summary>
            The path couldn't be found.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Exceptions.FileAlreadyExists">
            <summary>
            A file or a folder already exists with the same name.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Exceptions.FileNameTooLong">
            <summary>
            The file name is too long.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Exceptions.DiskFull">
            <summary>
            The disk is full.
            </summary>
        </member>
        <member name="T:WinCopies.IO.FileProcesses.FileSystemInfo">
            <summary>
            Provides information on file system items for file system processes.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.FileSystemInfo.FileSystemInfoProperties">
            <summary>
            Gets information for both <see cref="T:System.IO.FileInfo"/> and <see cref="T:System.IO.DirectoryInfo"/> objects.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.FileSystemInfo.FileType">
            <summary>
            Gets the file type of this <see cref="T:WinCopies.IO.FileProcesses.FileSystemInfo"/> item.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.FileSystemInfo.Exception">
            <summary>
            Gets, if any, the exceptions occured with this <see cref="T:WinCopies.IO.FileProcesses.FileSystemInfo"/> when processing.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.FileSystemInfo.HowToRetryToProcess">
            <summary>
            Gets or sets a value that indicates what the file system process has to do for this file when an error has occured.
            </summary>
        </member>
        <member name="T:WinCopies.IO.FileProcesses.Generic">
            <summary>
            Generic
            </summary>
        </member>
        <member name="M:WinCopies.IO.FileProcesses.Generic.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.HowToRetry.None">
            <summary>
            Does not retry.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.HowToRetry.Ignore">
            <summary>
            Ignores the current file and pass to the next item.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.HowToRetry.Retry">
            <summary>
            Retry without any modification on the process for the current file.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.HowToRetry.Rename">
            <summary>
            Renames the current file.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.HowToRetry.Replace">
            <summary>
            Replaces the file.
            </summary>
        </member>
        <member name="T:WinCopies.IO.FileProcesses.LoadFilesInfo">
            <summary>
            Provides instance methods and properties for a file search process. This class inherits from <see cref="T:WinCopies.Util.BackgroundWorker"/>.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.LoadFilesInfo.ApartmentState">
            <summary>
            Gets the <see cref="T:System.Threading.ApartmentState"/> of this thread.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.LoadFilesInfo.CancellationPending">
            <summary>
            Gets a value that indicates if the thread must try to cancel before finished the background tasks.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.LoadFilesInfo.IsBusy">
            <summary>
            Gets a value that indicates if the thread is busy.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.LoadFilesInfo.IsCancelled">
            <summary>
            Gets a value that indicates if the working is cancelled.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.LoadFilesInfo.Progress">
            <summary>
            Gets the current progress of the working in percent.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.LoadFilesInfo.WorkerReportsProgress">
            <summary>
            Gets or sets a value that indicates if the thread can notify of the progress.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.LoadFilesInfo.WorkerSupportsCancellation">
            <summary>
            Gets or sets a value that indicates if the thread supports the cancellation.
            </summary>
        </member>
        <member name="M:WinCopies.IO.FileProcesses.LoadFilesInfo.CancelAsync">
            <summary>
            Cancels the working asynchronously.
            </summary>
        </member>
        <member name="M:WinCopies.IO.FileProcesses.LoadFilesInfo.Cancel">
            <summary>
            Cancels the working.
            </summary>
        </member>
        <member name="M:WinCopies.IO.FileProcesses.LoadFilesInfo.ReportProgress(System.Int32)">
            <summary>
            Notifies of the progress.
            </summary>
            <param name="percentProgress">
            Progress percentage.
            </param>
        </member>
        <member name="M:WinCopies.IO.FileProcesses.LoadFilesInfo.ReportProgress(System.Int32,System.Object)">
            <summary>
            Notifies of the progress.
            </summary>
            <param name="percentProgress">
            Progress percentage.
            </param>
            <param name="userState">
            User object.
            </param>
        </member>
        <member name="E:WinCopies.IO.FileProcesses.LoadFilesInfo.DoWork">
            <summary>
            <para>This event is called when the background thread starts. Put your background working code here.</para>
            <para>The event handler is running in the background thread.</para>
            </summary>
        </member>
        <member name="E:WinCopies.IO.FileProcesses.LoadFilesInfo.ProgressChanged">
            <summary>
            <para>This event is called when the background thread reports progress.</para>
            <para>The event handler is running in the main thread.</para>
            </summary>
        </member>
        <member name="E:WinCopies.IO.FileProcesses.LoadFilesInfo.RunWorkerCompleted">
            <summary>
            <para>This event is called when the background thread has finished working.</para>
            <para>The event handler is running in the background thread.</para>
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.LoadFilesInfo.SourcePath">
            <summary>
            Gets the source path for all the files and folders in this process.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.LoadFilesInfo.ActionType">
            <summary>
            Gets or sets the <see cref="T:WinCopies.IO.FileProcesses.ActionType"/> to set this <see cref="T:WinCopies.IO.FileProcesses.LoadFilesInfo"/> to.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.LoadFilesInfo.Paths">
            <summary>
            Gets the paths to browse.
            </summary>
        </member>
        <member name="E:WinCopies.IO.FileProcesses.LoadFilesInfo.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:WinCopies.IO.FileProcesses.LoadFilesInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.IO.FileProcesses.LoadFilesInfo"/> class.
            </summary>
        </member>
        <member name="M:WinCopies.IO.FileProcesses.LoadFilesInfo.#ctor(System.Collections.Generic.IList{WinCopies.IO.FileProcesses.FileSystemInfo},WinCopies.IO.FileProcesses.ActionType)">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.IO.FileProcesses.LoadFilesInfo"/> class using custom parameters.
            </summary>
            <param name="paths">The paths to browse.</param>
            <param name="actionType">The <see cref="T:WinCopies.IO.FileProcesses.ActionType"/> to set this <see cref="T:WinCopies.IO.FileProcesses.LoadFilesInfo"/> for.</param>
        </member>
        <member name="M:WinCopies.IO.FileProcesses.LoadFilesInfo.Load">
            <summary>
            Loads the items.
            </summary>
        </member>
        <member name="T:WinCopies.IO.FileProcesses.Process">
            <summary>
            Provides the base class for all processes manager in the WinCopies framework. This is an abstract class.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.Process.ApartmentState">
            <summary>
            Gets the <see cref="T:System.Threading.ApartmentState"/> of this thread.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.Process.CancellationPending">
            <summary>
            Gets a value that indicates if the thread must try to cancel before finished the background tasks.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.Process.IsBusy">
            <summary>
            Gets a value that indicates if the thread is busy.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.Process.IsCancelled">
            <summary>
            Gets a value that indicates if the working is cancelled.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.Process.Progress">
            <summary>
            Gets the current progress of the working in percent.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.Process.WorkerReportsProgress">
            <summary>
            Gets or sets a value that indicates if the thread can notify of the progress.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.Process.WorkerSupportsCancellation">
            <summary>
            Gets or sets a value that indicates if the thread supports the cancellation.
            </summary>
        </member>
        <member name="M:WinCopies.IO.FileProcesses.Process.CancelAsync">
            <summary>
            Cancels the working asynchronously.
            </summary>
        </member>
        <member name="M:WinCopies.IO.FileProcesses.Process.Cancel">
            <summary>
            Cancels the working.
            </summary>
        </member>
        <member name="M:WinCopies.IO.FileProcesses.Process.ReportProgress(System.Int32)">
            <summary>
            Notifies of the progress.
            </summary>
            <param name="percentProgress">
            Progress percentage.
            </param>
        </member>
        <member name="M:WinCopies.IO.FileProcesses.Process.ReportProgress(System.Int32,System.Object)">
            <summary>
            Notifies of the progress.
            </summary>
            <param name="percentProgress">
            Progress percentage.
            </param>
            <param name="userState">
            User object.
            </param>
        </member>
        <member name="E:WinCopies.IO.FileProcesses.Process.DoWork">
            <summary>
            <para>This event is called when the background thread starts. Put your background working code here.</para>
            <para>The event handler is running in the background thread.</para>
            </summary>
        </member>
        <member name="E:WinCopies.IO.FileProcesses.Process.ProgressChanged">
            <summary>
            <para>This event is called when the background thread reports progress.</para>
            <para>The event handler is running in the main thread.</para>
            </summary>
        </member>
        <member name="E:WinCopies.IO.FileProcesses.Process.RunWorkerCompleted">
            <summary>
            <para>This event is called when the background thread has finished working.</para>
            <para>The event handler is running in the background thread.</para>
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.Process.ActionType">
            <summary>
            Determines the type of this process.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.Process.FilesInfoLoader">
            <summary>
            Gets the loader of the files and folders for this process.
            </summary>
        </member>
        <member name="M:WinCopies.IO.FileProcesses.Process.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:WinCopies.IO.FileProcesses.Process"/> class.
            </summary>
        </member>
        <member name="T:WinCopies.IO.FileProcesses.Properties.Resources">
            <summary>
              Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.Properties.Resources.ResourceManager">
            <summary>
              Retourne l'instance ResourceManager mise en cache utilisée par cette classe.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.Properties.Resources.Culture">
            <summary>
              Remplace la propriété CurrentUICulture du thread actuel pour toutes
              les recherches de ressources à l'aide de cette classe de ressource fortement typée.
            </summary>
        </member>
        <member name="T:WinCopies.IO.FileProcesses.Search_Terms_Properties">
            <summary>
            Classe exposant des propriétés qui permettent, lorsque la classe est instanciée, de définir les propriétés de recherche de fichiers et dossiers.
            </summary>
        </member>
        <member name="T:WinCopies.IO.FileProcesses.Search_Terms_Properties.Properties_To_Look_For___Enum">
            <summary>
            Énumération des différents types de propriétés à vérifier. Cette énumération peut contenir plusieurs valeurs et est donc organisée selon un champ de bits.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Search_Terms_Properties.Properties_To_Look_For___Enum.None">
            <summary>
            Ne vérifie aucune catégorie.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Search_Terms_Properties.Properties_To_Look_For___Enum.FullName">
            <summary>
            Vérifie le répertoire complet - répertoire ( dossier ) et nom du fichier / dossier.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Search_Terms_Properties.Properties_To_Look_For___Enum.Name">
            <summary>
            Vérifie le nom du fichier / dossier.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Search_Terms_Properties.Properties_To_Look_For___Enum.Extension">
            <summary>
            Vérifie l'extension du nom du fichier / dossier.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Search_Terms_Properties.Properties_To_Look_For___Enum.FolderPath">
            <summary>
            Vérifie le répertoire du fichier / dossier.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Search_Terms_Properties.Properties_To_Look_For___Enum.CreationDate">
            <summary>
            Vérifie la date de création du fichier / dossier.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Search_Terms_Properties.Properties_To_Look_For___Enum.LastModificationDate">
            <summary>
            Vérifie la date de dernière modification du dossier / fichier.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Search_Terms_Properties.Properties_To_Look_For___Enum.LastReadingDate">
            <summary>
            Vérifie la dernière date de lecture du dossier / fichier.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Search_Terms_Properties.Properties_To_Look_For___Enum.Size">
            <summary>
            Vérifie la taille du fichier. Pour les dossiers, cette option n'est pas encore gérée dans cette version du framework de WinCopies.
            </summary>
        </member>
        <member name="T:WinCopies.IO.FileProcesses.Search_Terms_Properties.Look_For___Enum">
            <summary>
            Énumération des différents types de dossiers / fichiers / lecteurs, à vérifier. Cette énumération peut contenir plusieurs valeurs à la fois et est donc organisée selon un champ de bits.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Search_Terms_Properties.Look_For___Enum.None">
            <summary>
            Ne recherche rien.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Search_Terms_Properties.Look_For___Enum.Folders">
            <summary>
            Recherche dans les dossiers.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Search_Terms_Properties.Look_For___Enum.Files">
            <summary>
            Recherche dans les fichiers.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Search_Terms_Properties.Look_For___Enum.Drives">
            <summary>
            Recherche des lecteurs entiers.
            </summary>
        </member>
        <member name="T:WinCopies.IO.FileProcesses.Search_Terms_Properties.Date_Time_Look_For">
            <summary>
            Énumération des différentes propriétés de la date à vérifier, par ex. le jour, le mois ou l'année. Cette énumération peut contenir plusieurs valeurs à la fois et est donc organisée selon un champ de bits.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Search_Terms_Properties.Date_Time_Look_For.None">
            <summary>
            Ne vérifie aucune propriété de la date.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Search_Terms_Properties.Date_Time_Look_For.Day">
            <summary>
            Vérifie le jour de la date à comparer.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Search_Terms_Properties.Date_Time_Look_For.Month">
            <summary>
            Vérifie le mois de la date à comparer.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Search_Terms_Properties.Date_Time_Look_For.Year">
            <summary>
            Vérifie l'année de la date à comparer.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Search_Terms_Properties.Date_Time_Look_For.Hour">
            <summary>
            Vérifie l'heure de la date à comparer.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Search_Terms_Properties.Date_Time_Look_For.Minutes">
            <summary>
            Vérifie les minutes de la date à comparer.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.Search_Terms_Properties.Date_Time_Look_For.Seconds">
            <summary>
            Vérifie les secondes de la date à comparer.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.Search_Terms_Properties.FullName">
            <summary>
            Le nom complet ( chemin d'accès ) à vérifier.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.Search_Terms_Properties.FullName_FullWord">
            <summary>
            Indique s'il faut ajouter les éléments analysés à la liste des éléments trouvés uniquement s'ils  correspondent en entier au terme recherché. La valeur par défaut est false, ce qui signifie que les éléments seront ajoutés même s'ils ne correspondent que partiellement au terme de recherche indiqué.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.Search_Terms_Properties.FullName_CaseSensitive">
            <summary>
            Indique si la recherche doit être sensible à la casse. La valeur par défaut est false, ce qui signifie qu'il n'y aura aucune restriction dans la recherche en fonction de la casse.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.Search_Terms_Properties.Name">
            <summary>
            Le nom à chercher.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.Search_Terms_Properties.Name_FullWord">
            <summary>
            Indique s'il faut ajouter les éléments analysés à la liste des éléments trouvés uniquement s'ils  correspondent en entier au terme recherché. La valeur par défaut est false, ce qui signifie que les éléments seront ajoutés même s'ils ne correspondent que partiellement au terme de recherche indiqué.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.Search_Terms_Properties.Name_CaseSensitive">
            <summary>
            Indique si la recherche doit être sensible à la casse. La valeur par défaut est false, ce qui signifie qu'il n'y aura aucune restriction dans la recherche en fonction de la casse.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.Search_Terms_Properties.Extension">
            <summary>
            L'extension à tester.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.Search_Terms_Properties.Extension_FullWord">
            <summary>
            Indique s'il faut ajouter les éléments analysés à la liste des éléments trouvés uniquement s'ils  correspondent en entier au terme recherché. La valeur par défaut est false, ce qui signifie que les éléments seront ajoutés même s'ils ne correspondent que partiellement au terme de recherche indiqué.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.Search_Terms_Properties.Extension_CaseSensitive">
            <summary>
            Indique si la recherche doit être sensible à la casse. La valeur par défaut est false, ce qui signifie qu'il n'y aura aucune restriction dans la recherche en fonction de la casse.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.Search_Terms_Properties.FolderPath">
            <summary>
            Le nom du répertoire des fichiers / dossiers à vérifier.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.Search_Terms_Properties.FolderPath_FullWord">
            <summary>
            Indique s'il faut ajouter les éléments analysés à la liste des éléments trouvés uniquement s'ils  correspondent en entier au terme recherché. La valeur par défaut est false, ce qui signifie que les éléments seront ajoutés même s'ils ne correspondent que partiellement au terme de recherche indiqué.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.Search_Terms_Properties.FolderPath_CaseSensitive">
            <summary>
            Indique si la recherche doit être sensible à la casse. La valeur par défaut est false, ce qui signifie qu'il n'y aura aucune restriction dans la recherche en fonction de la casse.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.Search_Terms_Properties.CreationDate_Look_For">
            <summary>
            Obtient ou définit une valeur qui indique s'il faut ou non vérifier la date de création des éléments éventuellement mentionnée.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.Search_Terms_Properties.CreationDate">
            <summary>
            Obtient ou définit une valeur qui indique la date de création à vérifier si la propriété CreationDate_Look_For a la valeur True.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.Search_Terms_Properties.LastModificationDate_Look_For">
            <summary>
            Obtient ou définit une valeur qui indique s'il faut ou non vérifier la date de dernière modification des éléments éventuellement mentionnée.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.Search_Terms_Properties.LastModificationDate">
            <summary>
            Obtient ou définit une valeur qui indique la date de dernière modification à vérifier si la propriété CreationDate_Look_For a la valeur True.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.Search_Terms_Properties.LastReadingDate_Look_For">
            <summary>
            Obtient ou définit une valeur qui indique s'il faut ou non vérifier la date de dernier accès des éléments éventuellement mentionnée.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.Search_Terms_Properties.LastReadingDate">
            <summary>
            Obtient ou définit une valeur qui indique la date de dernier accès à vérifier si la propriété CreationDate_Look_For a la valeur True.
            </summary>
        </member>
        <member name="P:WinCopies.IO.FileProcesses.Search_Terms_Properties.Size">
            <summary>
            Obtient ou dénit une valeur qui indique la taille à comparer.
            </summary>
        </member>
        <member name="M:WinCopies.IO.FileProcesses.Search_Terms_Properties.#ctor">
            <summary>
            Initialise une nouvelle instance de la classe Search_Terms_Properties.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.FileFlags.FILE_FLAG_BACKUP_SEMANTICS">
             <summary>
             <para>The file is being opened or created for a backup or restore operation. The system ensures that the calling process overrides file security checks when the process has SE_BACKUP_NAME and SE_RESTORE_NAME privileges. For more information, see the 'Changing Privileges in a Token' article at this page: https://msdn.microsoft.com/b8e47d04-07c1-4d57-8209-6b0c397476e5 .</para>
            
             <para>You must set this flag to obtain a handle to a directory. A directory handle can be passed to some functions instead of a file handle. For more information, see the Remarks section.</para>
             </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.FileFlags.FILE_FLAG_DELETE_ON_CLOSE">
             <summary>
             <para>The file is to be deleted immediately after all of its handles are closed, which includes the specified handle and any other open or duplicated handles.</para>
             <para>If there are existing open handles to a file, the call fails unless they were all opened with the FILE_SHARE_DELETE share mode.</para>
            
             <para>Subsequent open requests for the file fail, unless the FILE_SHARE_DELETE share mode is specified.</para>
             </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.FileFlags.FILE_FLAG_NO_BUFFERING">
             <summary>
             <para>The file or device is being opened with no system caching for data reads and writes. This flag does not affect hard disk caching or memory mapped files.</para>
            
             <para>There are strict requirements for successfully working with files opened with CreateFile using the FILE_FLAG_NO_BUFFERING flag, for details see the 'File Buffering' article at this page: https://msdn.microsoft.com/ae1e5d0f-9b55-4aae-8402-b9c8e33d9363 .</para>
             </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.FileFlags.FILE_FLAG_OPEN_NO_RECALL">
            <summary>
            The file data is requested, but it should continue to be located in remote storage. It should not be transported back to local storage. This flag is for use by remote storage systems.
            </summary>
        </member>
        <member name="F:WinCopies.IO.FileProcesses.FileFlags.FILE_FLAG_OPEN_REPARSE_POINT">
             <summary>
             <para>Normal reparse point ( https://msdn.microsoft.com/3abb3a08-9a00-43eb-9792-82eab1a25f06 ) processing will not occur; CreateFile will attempt to open the reparse point. When a file is opened, a file handle is returned, whether or not the filter that controls the reparse point is operational.</para>
            
             <para>This flag cannot be used with the <see cref="F:System.IO.FileMode.Create"/> flag.</para>
            
             <para>If the file is not a reparse point, then this flag is ignored.</para>
            
             <para>For more information, see the Remarks section.</para>
             </summary>
        </member>
        <member name="M:WinCopies.IO.FileProcesses.UnmanagedFileLoader.CreateFile(System.String,System.UInt32,System.IO.FileShare,System.IntPtr,System.IO.FileMode,System.UInt32,System.IntPtr)">
             <summary>
             <para>Creates or opens a file or I/O device. The most commonly used I/O devices are as follows: file, file stream, directory, physical disk, volume, console buffer, tape drive, communications resource, mailslot, and pipe. The function returns a handle that can be used to access the file or device for various types of I/O depending on the file or device and the flags and attributes specified.</para>
            
             <para>To perform this operation as a transacted operation, which results in a handle that can be used for transacted I/O, use the CreateFileTransacted function.</para>
             </summary>
             <param name="lpFileName"><para>The name of the file or device to be created or opened. You may use either forward slashes (/) or backslashes (\) in this name.</para>
            
             <para>In the ANSI version of this function, the name is limited to MAX_PATH characters. To extend this limit to 32,767 wide characters, call the Unicode version of the function and prepend "\?" to the path.For more information, see the 'Naming Files, Paths, and Namespaces' article at this page: https://msdn.microsoft.com/121cd5b2-e6fd-4eb4-99b4-b652d27b53e8 .</para>
            
             <para>For information on special device names, see the 'Defining an MS-DOS Device Name' article at this page: https://msdn.microsoft.com/7d802e9f-dc09-4e3d-b064-e9b57af396e2 .</para>
            
             <para>To create a file stream, specify the name of the file, a colon, and then the name of the stream.For more information, see the 'File Streams' article at this page: https://msdn.microsoft.com/41dda6f1-a6d1-4e76-94f3-a72f9e491bee .</para>
             <para>Tip Starting with Windows 10, version 1607, for the unicode version of this function (CreateFileW), you can opt-in to remove the MAX_PATH limitation without prepending "\\?\". See the "Maximum Path Length Limitation" section of Naming Files, Paths, and Namespaces for details.</para></param>
             <param name="dwDesiredAccess"><para>The requested access to the file or device, which can be summarized as read, write, both or neither zero).</para>
            
             <para>The most commonly used values are <see cref="F:WinCopies.IO.FileProcesses.GenericAccessRights.GENERIC_READ"/>, <see cref="F:WinCopies.IO.FileProcesses.GenericAccessRights.GENERIC_WRITE"/>, or both (<see cref="F:WinCopies.IO.FileProcesses.GenericAccessRights.GENERIC_READ"/> | <see cref="F:WinCopies.IO.FileProcesses.GenericAccessRights.GENERIC_WRITE"/>). For more information, see the 'Generic Access Rights' article at this page: https://msdn.microsoft.com/e18cede9-9bf7-4866-850b-5d7fa43a5b0f , the 'File Security and Access Rights' article at this page: https://msdn.microsoft.com/991d7d94-fae7-406f-b2e3-dee811279366 , the 'File Access Rights Constants' article at this page: https://msdn.microsoft.com/c534e853-b61f-414d-befe-8d3c4bf08d22 , and the 'ACCESS_MASK' article at this page: https://msdn.microsoft.com/f115ee54-3333-4109-8004-d71904a7a943 .</para>
            
             <para>If this parameter is zero, the application can query certain metadata such as file, directory, or device attributes without accessing that file or device, even if <see cref="F:WinCopies.IO.FileProcesses.GenericAccessRights.GENERIC_READ"/> access would have been denied.</para>
            
             <para>You cannot request an access mode that conflicts with the sharing mode that is specified by the dwShareMode parameter in an open request that already has an open handle.</para>
            
             <para>For more information, see the Remarks section of this topic and the 'Creating and Opening Files' article at this page: https://msdn.microsoft.com/f115ee54-3333-4109-8004-d71904a7a943 .</para></param>
             <param name="dwShareMode"><para>The requested sharing mode of the file or device, which can be read, write, both, delete, all of these, or none (refer to the following table). Access requests to attributes or extended attributes are not affected by this flag.</para>
            
             <para>If this parameter is zero and CreateFile succeeds, the file or device cannot be shared and cannot be opened again until the handle to the file or device is closed.For more information, see the Remarks section.</para>
            
             <para>You cannot request a sharing mode that conflicts with the access mode that is specified in an existing request that has an open handle. CreateFile would fail and the <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/> function would return <see cref="!:WinCopies.IO.FilesProcesses.NativeWin32FilesProcessesErrorCodes.ERROR_SHARING_VIOLATION"/>.</para>
            
             <para>To enable a process to share a file or device while another process has the file or device open, use a compatible combination of one or more of the following values. For more information about valid combinations of this parameter with the dwDesiredAccess parameter, see the 'Creating and Opening Files' article at this page: https://msdn.microsoft.com/094cac29-c66d-409e-8928-878dc693d393 .</para>
            
             <para>Note The sharing options for each open handle remain in effect until that handle is closed, regardless of process context.</para></param>
             <param name="lpSecurityAttributes"><para>A pointer to a SECURITY_ATTRIBUTES structure that contains two separate but related data members: an optional security descriptor, and a Boolean value that determines whether the returned handle can be inherited by child processes.</para>
            
             <para>This parameter can be NULL.</para>
            
             <para>If this parameter is NULL, the handle returned by CreateFile cannot be inherited by any child processes the application may create and the file or device associated with the returned handle gets a default security descriptor.</para>
            
             <para>The lpSecurityDescriptor member of the structure specifies a SECURITY_DESCRIPTOR for a file or device. If this member is NULL, the file or device associated with the returned handle is assigned a default security descriptor.</para>
            
             <para>CreateFile ignores the lpSecurityDescriptor member when opening an existing file or device, but continues to use the bInheritHandle member.</para>
            
             <para>The bInheritHandlemember of the structure specifies whether the returned handle can be inherited.</para>
            
             <para>For more information, see the Remarks section.</para></param>
             <param name="dwCreationDisposition"><para>An action to take on a file or device that exists or does not exist.</para>
            
             <para>For devices other than files, this parameter is usually set to <see cref="F:System.IO.FileMode.Open"/>.</para>
            
             <para>For more information, see the Remarks section.</para>
            
             <para>This parameter must be one of the following values, which cannot be combined:</para></param>
             <param name="dwFlagsAndAttributes"><para>The file or device attributes and flags, <see cref="F:System.IO.FileAttributes.Normal"/> being the most common default value for files.</para>
            
             <para>This parameter can include any combination of the available file attributes (FileAttributes.*). All other file attributes override <see cref="F:System.IO.FileAttributes.Normal"/>.</para>
            
             <para>This parameter can also contain combinations of flags (FILE_FLAG_) for control of file or device caching behavior, access modes, and other special-purpose flags. These combine with any <see cref="T:System.IO.FileAttributes"/> values.</para>
            
             <para>This parameter can also contain Security Quality of Service (SQOS) information by specifying the SECURITY_SQOS_PRESENT flag. Additional SQOS-related flags information is presented in the table following the attributes and flags tables.</para>
             
             <para>Note When CreateFile opens an existing file, it generally combines the file flags with the file attributes of the existing file, and ignores any file attributes supplied as part of dwFlagsAndAttributes.Special cases are detailed in Creating and Opening Files.</para>
            
             <para>Some of the following file attributes and flags may only apply to files and not necessarily all other types of devices that CreateFile can open. For additional information, see the Remarks section of this topic and 'Creating and the Opening Files' article at this page: https://msdn.microsoft.com/094cac29-c66d-409e-8928-878dc693d393 .</para>
            
             <para>For more advanced access to file attributes, see the 'SetFileAttributes' article at this page: https://msdn.microsoft.com/3d5400c3-555f-44fc-9470-52a36d04d90b . For a complete list of all file attributes with their values and descriptions, see the 'File Attribute Constants' article at this page: https://msdn.microsoft.com/ed9a73d2-7fb6-4fb7-97f6-4dbf89e2f156 .</para>
             
             <para>The dwFlagsAndAttributes parameter can also specify SQOS information. For more information, see the 'Impersonation Levels' article at this page: https://msdn.microsoft.com/ae152dbf-44f0-417f-a85e-09bf60dcfcb0 . When the calling application specifies the SECURITY_SQOS_PRESENT flag as part of dwFlagsAndAttributes, it can also contain one or more of the following values.</para></param>
             <param name="hTemplateFile"><para>A valid handle to a template file with the GENERIC_READ access right. The template file supplies file attributes and extended attributes for the file that is being created.</para>
            
             <para>This parameter can be NULL.</para>
            
             <para>When opening an existing file, CreateFile ignores this parameter.</para>
            
             <para>When opening a new encrypted file, the file inherits the discretionary access control list from its parent directory.For additional information, see File Encryption.</para></param>
             <returns><para>If the function succeeds, the return value is an open handle to the specified file, device, named pipe, or mail slot.</para>
            
             <para>If the function fails, the return value is <see cref="F:WinCopies.IO.FileProcesses.UnmanagedFileLoader.INVALID_HANDLE_VALUE"/>. To get extended error information, call <see cref="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error"/>.</para></returns>
        </member>
    </members>
</doc>
